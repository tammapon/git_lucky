
SCARA_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005644  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005864  08005864  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800586c  0800586c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000078  080058ec  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080058ec  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125a4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d4  00000000  00000000  0003264c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00034a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  000359d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022708  00000000  00000000  000368b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012067  00000000  00000000  00058fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3334  00000000  00000000  0006b027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013e35b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004660  00000000  00000000  0013e3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080057fc 	.word	0x080057fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080057fc 	.word	0x080057fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <HAL_UART_RxCpltCallback>:
uint8_t state_check;
uint8_t checksum[2];
uint8_t acknowledge[5] = {0xFF, 0x01, 0x01, 0x66, 0x65};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
//	HAL_UART_Receive(&huart2, RX_Buffer, 7,100);
	memcpy(package,RX_Buffer,7);
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <HAL_UART_RxCpltCallback+0x30>)
 80005b2:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <HAL_UART_RxCpltCallback+0x34>)
 80005b4:	6810      	ldr	r0, [r2, #0]
 80005b6:	6018      	str	r0, [r3, #0]
 80005b8:	8891      	ldrh	r1, [r2, #4]
 80005ba:	7992      	ldrb	r2, [r2, #6]
 80005bc:	8099      	strh	r1, [r3, #4]
 80005be:	719a      	strb	r2, [r3, #6]
//	for (int i = 0; i<sizeof (package); i++) {
//		package[i] = RX_Buffer[i];
//		//printf("package[%d] : %d\n", i, package[i]);
//	}
	package_state();
 80005c0:	f000 fedc 	bl	800137c <package_state>
//	for (int i = 0; i<sizeof (RX_Buffer); i++) {
//		RX_Buffer[i] = 0;
//	}
	HAL_UART_Receive_IT(&huart2, RX_Buffer, 7);
 80005c4:	2207      	movs	r2, #7
 80005c6:	4905      	ldr	r1, [pc, #20]	; (80005dc <HAL_UART_RxCpltCallback+0x34>)
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <HAL_UART_RxCpltCallback+0x38>)
 80005ca:	f003 fdce 	bl	800416a <HAL_UART_Receive_IT>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000344 	.word	0x20000344
 80005dc:	20000094 	.word	0x20000094
 80005e0:	200002b4 	.word	0x200002b4

080005e4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim14 )
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a71      	ldr	r2, [pc, #452]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	f040 80db 	bne.w	80007ac <HAL_TIM_PeriodElapsedCallback+0x1c8>
  {
	  //state_check > 1
	  	      if (state_check == 1) {
 80005f6:	4b70      	ldr	r3, [pc, #448]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	f040 80d2 	bne.w	80007a4 <HAL_TIM_PeriodElapsedCallback+0x1c0>
	  	      	switch (package[4]) {
 8000600:	4b6e      	ldr	r3, [pc, #440]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	3b41      	subs	r3, #65	; 0x41
 8000606:	2b39      	cmp	r3, #57	; 0x39
 8000608:	f200 80c3 	bhi.w	8000792 <HAL_TIM_PeriodElapsedCallback+0x1ae>
 800060c:	a201      	add	r2, pc, #4	; (adr r2, 8000614 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800060e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000612:	bf00      	nop
 8000614:	08000751 	.word	0x08000751
 8000618:	08000793 	.word	0x08000793
 800061c:	08000793 	.word	0x08000793
 8000620:	08000793 	.word	0x08000793
 8000624:	08000793 	.word	0x08000793
 8000628:	08000793 	.word	0x08000793
 800062c:	08000793 	.word	0x08000793
 8000630:	08000793 	.word	0x08000793
 8000634:	08000793 	.word	0x08000793
 8000638:	08000793 	.word	0x08000793
 800063c:	08000793 	.word	0x08000793
 8000640:	08000793 	.word	0x08000793
 8000644:	08000793 	.word	0x08000793
 8000648:	08000793 	.word	0x08000793
 800064c:	08000793 	.word	0x08000793
 8000650:	08000793 	.word	0x08000793
 8000654:	08000793 	.word	0x08000793
 8000658:	08000793 	.word	0x08000793
 800065c:	08000793 	.word	0x08000793
 8000660:	08000793 	.word	0x08000793
 8000664:	08000793 	.word	0x08000793
 8000668:	08000793 	.word	0x08000793
 800066c:	08000793 	.word	0x08000793
 8000670:	08000793 	.word	0x08000793
 8000674:	08000793 	.word	0x08000793
 8000678:	08000793 	.word	0x08000793
 800067c:	08000793 	.word	0x08000793
 8000680:	08000793 	.word	0x08000793
 8000684:	08000793 	.word	0x08000793
 8000688:	08000793 	.word	0x08000793
 800068c:	08000793 	.word	0x08000793
 8000690:	08000793 	.word	0x08000793
 8000694:	08000793 	.word	0x08000793
 8000698:	08000793 	.word	0x08000793
 800069c:	08000793 	.word	0x08000793
 80006a0:	08000793 	.word	0x08000793
 80006a4:	08000793 	.word	0x08000793
 80006a8:	0800070d 	.word	0x0800070d
 80006ac:	0800072f 	.word	0x0800072f
 80006b0:	08000793 	.word	0x08000793
 80006b4:	08000793 	.word	0x08000793
 80006b8:	08000771 	.word	0x08000771
 80006bc:	08000793 	.word	0x08000793
 80006c0:	08000793 	.word	0x08000793
 80006c4:	08000793 	.word	0x08000793
 80006c8:	08000793 	.word	0x08000793
 80006cc:	08000793 	.word	0x08000793
 80006d0:	08000793 	.word	0x08000793
 80006d4:	08000793 	.word	0x08000793
 80006d8:	080006fd 	.word	0x080006fd
 80006dc:	08000793 	.word	0x08000793
 80006e0:	0800071d 	.word	0x0800071d
 80006e4:	08000761 	.word	0x08000761
 80006e8:	08000793 	.word	0x08000793
 80006ec:	08000793 	.word	0x08000793
 80006f0:	08000793 	.word	0x08000793
 80006f4:	08000741 	.word	0x08000741
 80006f8:	08000781 	.word	0x08000781
	  	      		case 0x72 :{
	  	      			Motor1_SetPWM(50);
 80006fc:	2032      	movs	r0, #50	; 0x32
 80006fe:	f000 fd53 	bl	80011a8 <Motor1_SetPWM>
	  	      			Motor1_On(1, 30);
 8000702:	211e      	movs	r1, #30
 8000704:	2001      	movs	r0, #1
 8000706:	f000 fcfd 	bl	8001104 <Motor1_On>
	  	      			break;
 800070a:	e04c      	b.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x1c2>
	  	      		}
	  	      		case 0x66 :{
	  	      			Motor1_SetPWM(50);
 800070c:	2032      	movs	r0, #50	; 0x32
 800070e:	f000 fd4b 	bl	80011a8 <Motor1_SetPWM>
	  	      			Motor1_On(0, 30);
 8000712:	211e      	movs	r1, #30
 8000714:	2000      	movs	r0, #0
 8000716:	f000 fcf5 	bl	8001104 <Motor1_On>
	  	  				break;
 800071a:	e044      	b.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x1c2>
	  	  			}
	  	      		case 0x74 :{
	  	      			Motor2_SetPWM(500);
 800071c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000720:	f000 fd60 	bl	80011e4 <Motor2_SetPWM>
	  	      			Motor2_On(1, 150);
 8000724:	2196      	movs	r1, #150	; 0x96
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fd00 	bl	800112c <Motor2_On>
	  	  				break;
 800072c:	e03b      	b.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x1c2>
	  	  			}
	  	      		case 0x67 :{
	  	      			Motor2_SetPWM(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000732:	f000 fd57 	bl	80011e4 <Motor2_SetPWM>
	  	      			Motor2_On(0, 100);
 8000736:	2164      	movs	r1, #100	; 0x64
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fcf7 	bl	800112c <Motor2_On>
	  	  				break;
 800073e:	e032      	b.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x1c2>
	  	  			}
	  	      		case 0x79 :{
	  	      			Motor3_SetPWM(100);
 8000740:	2064      	movs	r0, #100	; 0x64
 8000742:	f000 fd6b 	bl	800121c <Motor3_SetPWM>
	  	      			Motor3_On(1, 50);
 8000746:	2132      	movs	r1, #50	; 0x32
 8000748:	2001      	movs	r0, #1
 800074a:	f000 fd03 	bl	8001154 <Motor3_On>
	  	  				break;
 800074e:	e02a      	b.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x1c2>
	  	  			}
	  	      		case 0x41 :{
	  	      			Motor3_SetPWM(100);
 8000750:	2064      	movs	r0, #100	; 0x64
 8000752:	f000 fd63 	bl	800121c <Motor3_SetPWM>
	  	      			Motor3_On(0, 50);
 8000756:	2132      	movs	r1, #50	; 0x32
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fcfb 	bl	8001154 <Motor3_On>
	  	  				break;
 800075e:	e022      	b.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x1c2>
	  	  			}
	  	  			case 0x75 :{
	  	  				Motor4_SetPWM(200);
 8000760:	20c8      	movs	r0, #200	; 0xc8
 8000762:	f000 fd77 	bl	8001254 <Motor4_SetPWM>
	  	  				Motor4_On(1, 50);
 8000766:	2132      	movs	r1, #50	; 0x32
 8000768:	2001      	movs	r0, #1
 800076a:	f000 fd09 	bl	8001180 <Motor4_On>
	  	  				break;
 800076e:	e01a      	b.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x1c2>
	  	  			}
	  	  			case 0x6a :{
	  	  				Motor4_SetPWM(200);
 8000770:	20c8      	movs	r0, #200	; 0xc8
 8000772:	f000 fd6f 	bl	8001254 <Motor4_SetPWM>
	  	  				Motor4_On(0, 50);
 8000776:	2132      	movs	r1, #50	; 0x32
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fd01 	bl	8001180 <Motor4_On>
	  	  				break;
 800077e:	e012      	b.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x1c2>
	  	  			}
	  	  			case 0x7a :{
	  	  				Motor1_Off();
 8000780:	f000 fd84 	bl	800128c <Motor1_Off>
						Motor2_Off();
 8000784:	f000 fd8e 	bl	80012a4 <Motor2_Off>
						Motor3_Off();
 8000788:	f000 fd98 	bl	80012bc <Motor3_Off>
						Motor4_Off();
 800078c:	f000 fda2 	bl	80012d4 <Motor4_Off>
						break;
 8000790:	e009      	b.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x1c2>
	  	  			}
	  	  			default:{
	  	  				//err();
//	  	  				clear_buffer();
	  	  				Motor1_Off();
 8000792:	f000 fd7b 	bl	800128c <Motor1_Off>
	  	  				Motor2_Off();
 8000796:	f000 fd85 	bl	80012a4 <Motor2_Off>
	  	  				Motor3_Off();
 800079a:	f000 fd8f 	bl	80012bc <Motor3_Off>
	  	  				Motor4_Off();
 800079e:	f000 fd99 	bl	80012d4 <Motor4_Off>
 80007a2:	e000      	b.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x1c2>
	  //	      	Motor4_Off();
	  	  //    } else if (state_check == 2) { case
	  	  //
	  	  //    } else if (state_check == 3) { case
	  	  //
	  	      }
 80007a4:	bf00      	nop
	  	      state_check = 0;
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
//	  		Motor2_Off();
//	  		Motor3_Off();
//	  		Motor4_Off();

  }
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200002f8 	.word	0x200002f8
 80007b8:	200000a8 	.word	0x200000a8
 80007bc:	20000344 	.word	0x20000344

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f001 f968 	bl	8001a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f844 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f000 fbe8 	bl	8000fa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d0:	f000 fb92 	bl	8000ef8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007d4:	f000 f8e6 	bl	80009a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007d8:	f000 f984 	bl	8000ae4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007dc:	f000 f9f8 	bl	8000bd0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80007e0:	f000 fa6c 	bl	8000cbc <MX_TIM4_Init>
  MX_SPI2_Init();
 80007e4:	f000 f8a8 	bl	8000938 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80007e8:	f000 fbb0 	bl	8000f4c <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80007ec:	f000 fadc 	bl	8000da8 <MX_TIM8_Init>
  MX_TIM14_Init();
 80007f0:	f000 fb5e 	bl	8000eb0 <MX_TIM14_Init>
//  Motor1_SetPWM(180);
//  Motor2_SetPWM(1000);
//  Motor3_SetPWM(250);
//  Motor4_SetPWM(500);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //M1
 80007f4:	2100      	movs	r1, #0
 80007f6:	4810      	ldr	r0, [pc, #64]	; (8000838 <main+0x78>)
 80007f8:	f002 fc64 	bl	80030c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //M2
 80007fc:	2100      	movs	r1, #0
 80007fe:	480f      	ldr	r0, [pc, #60]	; (800083c <main+0x7c>)
 8000800:	f002 fc60 	bl	80030c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //M3
 8000804:	2108      	movs	r1, #8
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <main+0x80>)
 8000808:	f002 fc5c 	bl	80030c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //M4
 800080c:	2104      	movs	r1, #4
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <main+0x84>)
 8000810:	f002 fc58 	bl	80030c4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim14);
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <main+0x88>)
 8000816:	f002 fb95 	bl	8002f44 <HAL_TIM_Base_Start_IT>

  Motor1_Off();
 800081a:	f000 fd37 	bl	800128c <Motor1_Off>
  Motor2_Off();
 800081e:	f000 fd41 	bl	80012a4 <Motor2_Off>
  Motor3_Off();
 8000822:	f000 fd4b 	bl	80012bc <Motor3_Off>
  Motor4_Off();
 8000826:	f000 fd55 	bl	80012d4 <Motor4_Off>

  HAL_UART_Receive_IT(&huart2, RX_Buffer, 7);
 800082a:	2207      	movs	r2, #7
 800082c:	4907      	ldr	r1, [pc, #28]	; (800084c <main+0x8c>)
 800082e:	4808      	ldr	r0, [pc, #32]	; (8000850 <main+0x90>)
 8000830:	f003 fc9b 	bl	800416a <HAL_UART_Receive_IT>
  while (1)
 8000834:	e7fe      	b.n	8000834 <main+0x74>
 8000836:	bf00      	nop
 8000838:	200001d8 	.word	0x200001d8
 800083c:	2000014c 	.word	0x2000014c
 8000840:	2000026c 	.word	0x2000026c
 8000844:	20000224 	.word	0x20000224
 8000848:	200002f8 	.word	0x200002f8
 800084c:	20000094 	.word	0x20000094
 8000850:	200002b4 	.word	0x200002b4

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2234      	movs	r2, #52	; 0x34
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f004 fb94 	bl	8004f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <SystemClock_Config+0xdc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a2b      	ldr	r2, [pc, #172]	; (8000930 <SystemClock_Config+0xdc>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <SystemClock_Config+0xdc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000894:	2300      	movs	r3, #0
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <SystemClock_Config+0xe0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a25      	ldr	r2, [pc, #148]	; (8000934 <SystemClock_Config+0xe0>)
 800089e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <SystemClock_Config+0xe0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	2310      	movs	r3, #16
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c4:	2308      	movs	r3, #8
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008c8:	23b4      	movs	r3, #180	; 0xb4
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 ffbb 	bl	8002858 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008e8:	f000 fda6 	bl	8001438 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008ec:	f001 fc98 	bl	8002220 <HAL_PWREx_EnableOverDrive>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008f6:	f000 fd9f 	bl	8001438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2302      	movs	r3, #2
 8000900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000906:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800090a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	2105      	movs	r1, #5
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fcd1 	bl	80022c0 <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000924:	f000 fd88 	bl	8001438 <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3750      	adds	r7, #80	; 0x50
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI2_Init+0x64>)
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <MX_SPI2_Init+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI2_Init+0x64>)
 8000944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000948:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI2_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI2_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI2_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI2_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI2_Init+0x64>)
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI2_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SPI2_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI2_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SPI2_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI2_Init+0x64>)
 8000984:	220a      	movs	r2, #10
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_SPI2_Init+0x64>)
 800098a:	f002 fa03 	bl	8002d94 <HAL_SPI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000994:	f000 fd50 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000ac 	.word	0x200000ac
 80009a0:	40003800 	.word	0x40003800

080009a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b096      	sub	sp, #88	; 0x58
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2220      	movs	r2, #32
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fad7 	bl	8004f90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e2:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <MX_TIM1_Init+0x138>)
 80009e4:	4a3e      	ldr	r2, [pc, #248]	; (8000ae0 <MX_TIM1_Init+0x13c>)
 80009e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2999;
 80009e8:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <MX_TIM1_Init+0x138>)
 80009ea:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80009ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <MX_TIM1_Init+0x138>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80009f6:	4b39      	ldr	r3, [pc, #228]	; (8000adc <MX_TIM1_Init+0x138>)
 80009f8:	2263      	movs	r2, #99	; 0x63
 80009fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <MX_TIM1_Init+0x138>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <MX_TIM1_Init+0x138>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <MX_TIM1_Init+0x138>)
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a0e:	4833      	ldr	r0, [pc, #204]	; (8000adc <MX_TIM1_Init+0x138>)
 8000a10:	f002 fa49 	bl	8002ea6 <HAL_TIM_Base_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a1a:	f000 fd0d 	bl	8001438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a28:	4619      	mov	r1, r3
 8000a2a:	482c      	ldr	r0, [pc, #176]	; (8000adc <MX_TIM1_Init+0x138>)
 8000a2c:	f002 fddc 	bl	80035e8 <HAL_TIM_ConfigClockSource>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a36:	f000 fcff 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a3a:	4828      	ldr	r0, [pc, #160]	; (8000adc <MX_TIM1_Init+0x138>)
 8000a3c:	f002 faf2 	bl	8003024 <HAL_TIM_PWM_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a46:	f000 fcf7 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a56:	4619      	mov	r1, r3
 8000a58:	4820      	ldr	r0, [pc, #128]	; (8000adc <MX_TIM1_Init+0x138>)
 8000a5a:	f003 f9c5 	bl	8003de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a64:	f000 fce8 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a68:	2360      	movs	r3, #96	; 0x60
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 8000a6c:	2332      	movs	r3, #50	; 0x32
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	2204      	movs	r2, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4813      	ldr	r0, [pc, #76]	; (8000adc <MX_TIM1_Init+0x138>)
 8000a8e:	f002 fce9 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a98:	f000 fcce 	bl	8001438 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <MX_TIM1_Init+0x138>)
 8000ac0:	f003 fa0e 	bl	8003ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000aca:	f000 fcb5 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <MX_TIM1_Init+0x138>)
 8000ad0:	f000 fdce 	bl	8001670 <HAL_TIM_MspPostInit>

}
 8000ad4:	bf00      	nop
 8000ad6:	3758      	adds	r7, #88	; 0x58
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000224 	.word	0x20000224
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	; 0x38
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	615a      	str	r2, [r3, #20]
 8000b12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1499;
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000b1e:	f240 52db 	movw	r2, #1499	; 0x5db
 8000b22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000b2c:	2277      	movs	r2, #119	; 0x77
 8000b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b3c:	4823      	ldr	r0, [pc, #140]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000b3e:	f002 f9b2 	bl	8002ea6 <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b48:	f000 fc76 	bl	8001438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b56:	4619      	mov	r1, r3
 8000b58:	481c      	ldr	r0, [pc, #112]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000b5a:	f002 fd45 	bl	80035e8 <HAL_TIM_ConfigClockSource>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b64:	f000 fc68 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b68:	4818      	ldr	r0, [pc, #96]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000b6a:	f002 fa5b 	bl	8003024 <HAL_TIM_PWM_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b74:	f000 fc60 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b80:	f107 0320 	add.w	r3, r7, #32
 8000b84:	4619      	mov	r1, r3
 8000b86:	4811      	ldr	r0, [pc, #68]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000b88:	f003 f92e 	bl	8003de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b92:	f000 fc51 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b96:	2360      	movs	r3, #96	; 0x60
 8000b98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 60;
 8000b9a:	233c      	movs	r3, #60	; 0x3c
 8000b9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2208      	movs	r2, #8
 8000baa:	4619      	mov	r1, r3
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000bae:	f002 fc59 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000bb8:	f000 fc3e 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <MX_TIM2_Init+0xe8>)
 8000bbe:	f000 fd57 	bl	8001670 <HAL_TIM_MspPostInit>

}
 8000bc2:	bf00      	nop
 8000bc4:	3738      	adds	r7, #56	; 0x38
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000026c 	.word	0x2000026c

08000bd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]
 8000bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c00:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000c02:	4a2d      	ldr	r2, [pc, #180]	; (8000cb8 <MX_TIM3_Init+0xe8>)
 8000c04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1499;
 8000c06:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000c08:	f240 52db 	movw	r2, #1499	; 0x5db
 8000c0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000c16:	2263      	movs	r2, #99	; 0x63
 8000c18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c26:	4823      	ldr	r0, [pc, #140]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000c28:	f002 f93d 	bl	8002ea6 <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c32:	f000 fc01 	bl	8001438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c40:	4619      	mov	r1, r3
 8000c42:	481c      	ldr	r0, [pc, #112]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000c44:	f002 fcd0 	bl	80035e8 <HAL_TIM_ConfigClockSource>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c4e:	f000 fbf3 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c52:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000c54:	f002 f9e6 	bl	8003024 <HAL_TIM_PWM_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c5e:	f000 fbeb 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000c72:	f003 f8b9 	bl	8003de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c7c:	f000 fbdc 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	2360      	movs	r3, #96	; 0x60
 8000c82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000c84:	2332      	movs	r3, #50	; 0x32
 8000c86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	4619      	mov	r1, r3
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000c98:	f002 fbe4 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ca2:	f000 fbc9 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ca6:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <MX_TIM3_Init+0xe4>)
 8000ca8:	f000 fce2 	bl	8001670 <HAL_TIM_MspPostInit>

}
 8000cac:	bf00      	nop
 8000cae:	3738      	adds	r7, #56	; 0x38
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200001d8 	.word	0x200001d8
 8000cb8:	40000400 	.word	0x40000400

08000cbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cec:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000cee:	4a2d      	ldr	r2, [pc, #180]	; (8000da4 <MX_TIM4_Init+0xe8>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1499;
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000cf4:	f240 52db 	movw	r2, #1499	; 0x5db
 8000cf8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000d02:	2263      	movs	r2, #99	; 0x63
 8000d04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d12:	4823      	ldr	r0, [pc, #140]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000d14:	f002 f8c7 	bl	8002ea6 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d1e:	f000 fb8b 	bl	8001438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	481c      	ldr	r0, [pc, #112]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000d30:	f002 fc5a 	bl	80035e8 <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d3a:	f000 fb7d 	bl	8001438 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d3e:	4818      	ldr	r0, [pc, #96]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000d40:	f002 f970 	bl	8003024 <HAL_TIM_PWM_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d4a:	f000 fb75 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4810      	ldr	r0, [pc, #64]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000d5e:	f003 f843 	bl	8003de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d68:	f000 fb66 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000d70:	2332      	movs	r3, #50	; 0x32
 8000d72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000d84:	f002 fb6e 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d8e:	f000 fb53 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <MX_TIM4_Init+0xe4>)
 8000d94:	f000 fc6c 	bl	8001670 <HAL_TIM_MspPostInit>

}
 8000d98:	bf00      	nop
 8000d9a:	3738      	adds	r7, #56	; 0x38
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2000014c 	.word	0x2000014c
 8000da4:	40000800 	.word	0x40000800

08000da8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b092      	sub	sp, #72	; 0x48
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]
 8000dca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2220      	movs	r2, #32
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 f8dc 	bl	8004f90 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dd8:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000dda:	4a34      	ldr	r2, [pc, #208]	; (8000eac <MX_TIM8_Init+0x104>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 18000-1;
 8000dde:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000de0:	f244 624f 	movw	r2, #17999	; 0x464f
 8000de4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8000dec:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000dee:	2263      	movs	r2, #99	; 0x63
 8000df0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000df8:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e04:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000e06:	f002 f90d 	bl	8003024 <HAL_TIM_PWM_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000e10:	f000 fb12 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e20:	4619      	mov	r1, r3
 8000e22:	4821      	ldr	r0, [pc, #132]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000e24:	f002 ffe0 	bl	8003de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000e2e:	f000 fb03 	bl	8001438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e32:	2360      	movs	r3, #96	; 0x60
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 8000e36:	2332      	movs	r3, #50	; 0x32
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	2200      	movs	r2, #0
 8000e54:	4619      	mov	r1, r3
 8000e56:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000e58:	f002 fb04 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000e62:	f000 fae9 	bl	8001438 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000e8a:	f003 f829 	bl	8003ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000e94:	f000 fad0 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MX_TIM8_Init+0x100>)
 8000e9a:	f000 fbe9 	bl	8001670 <HAL_TIM_MspPostInit>

}
 8000e9e:	bf00      	nop
 8000ea0:	3748      	adds	r7, #72	; 0x48
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000104 	.word	0x20000104
 8000eac:	40010400 	.word	0x40010400

08000eb0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <MX_TIM14_Init+0x44>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 180-1;
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ebc:	22b3      	movs	r2, #179	; 0xb3
 8000ebe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ec8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ecc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000edc:	f001 ffe3 	bl	8002ea6 <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000ee6:	f000 faa7 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200002f8 	.word	0x200002f8
 8000ef4:	40002000 	.word	0x40002000

08000ef8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <MX_USART2_UART_Init+0x50>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f30:	f003 f83c 	bl	8003fac <HAL_UART_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f3a:	f000 fa7d 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200002b4 	.word	0x200002b4
 8000f48:	40004400 	.word	0x40004400

08000f4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <MX_USART3_UART_Init+0x50>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_USART3_UART_Init+0x4c>)
 8000f84:	f003 f812 	bl	8003fac <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f8e:	f000 fa53 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000194 	.word	0x20000194
 8000f9c:	40004800 	.word	0x40004800

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <MX_GPIO_Init+0x154>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a4d      	ldr	r2, [pc, #308]	; (80010f4 <MX_GPIO_Init+0x154>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b4b      	ldr	r3, [pc, #300]	; (80010f4 <MX_GPIO_Init+0x154>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b47      	ldr	r3, [pc, #284]	; (80010f4 <MX_GPIO_Init+0x154>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a46      	ldr	r2, [pc, #280]	; (80010f4 <MX_GPIO_Init+0x154>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <MX_GPIO_Init+0x154>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <MX_GPIO_Init+0x154>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a3f      	ldr	r2, [pc, #252]	; (80010f4 <MX_GPIO_Init+0x154>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <MX_GPIO_Init+0x154>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <MX_GPIO_Init+0x154>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a38      	ldr	r2, [pc, #224]	; (80010f4 <MX_GPIO_Init+0x154>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <MX_GPIO_Init+0x154>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|DIR_M4_Pin|MAX485_CONTROL_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f241 0181 	movw	r1, #4225	; 0x1081
 800102c:	4832      	ldr	r0, [pc, #200]	; (80010f8 <MX_GPIO_Init+0x158>)
 800102e:	f001 f8dd 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|DIR_M1_Pin|DIR_M2_Pin|DIR_M3_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001038:	4830      	ldr	r0, [pc, #192]	; (80010fc <MX_GPIO_Init+0x15c>)
 800103a:	f001 f8d7 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|SPI2_SS_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2103      	movs	r1, #3
 8001042:	482f      	ldr	r0, [pc, #188]	; (8001100 <MX_GPIO_Init+0x160>)
 8001044:	f001 f8d2 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4826      	ldr	r0, [pc, #152]	; (80010f8 <MX_GPIO_Init+0x158>)
 8001060:	f000 ff30 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DIR_M4_Pin MAX485_CONTROL_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DIR_M4_Pin|MAX485_CONTROL_Pin;
 8001064:	f241 0381 	movw	r3, #4225	; 0x1081
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	481e      	ldr	r0, [pc, #120]	; (80010f8 <MX_GPIO_Init+0x158>)
 800107e:	f000 ff21 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001082:	2304      	movs	r3, #4
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4818      	ldr	r0, [pc, #96]	; (80010f8 <MX_GPIO_Init+0x158>)
 8001096:	f000 ff15 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Current_sensor_Pin */
  GPIO_InitStruct.Pin = Current_sensor_Pin;
 800109a:	2308      	movs	r3, #8
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4812      	ldr	r0, [pc, #72]	; (80010f8 <MX_GPIO_Init+0x158>)
 80010ae:	f000 ff09 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin DIR_M1_Pin DIR_M2_Pin DIR_M3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|DIR_M1_Pin|DIR_M2_Pin|DIR_M3_Pin;
 80010b2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	480c      	ldr	r0, [pc, #48]	; (80010fc <MX_GPIO_Init+0x15c>)
 80010cc:	f000 fefa 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin SPI2_SS_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|SPI2_SS_Pin;
 80010d0:	2303      	movs	r3, #3
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_GPIO_Init+0x160>)
 80010e8:	f000 feec 	bl	8001ec4 <HAL_GPIO_Init>

}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020400 	.word	0x40020400

08001104 <Motor1_On>:

long map(long x, long fromLow, long fromHigh, long toLow, long toHigh) {
  return ((x - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow);
}

void Motor1_On(char Direction, char speed) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, Direction);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	461a      	mov	r2, r3
 8001118:	2120      	movs	r1, #32
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <Motor1_On+0x24>)
 800111c:	f001 f866 	bl	80021ec <HAL_GPIO_WritePin>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020000 	.word	0x40020000

0800112c <Motor2_On>:

void Motor2_On(char Direction, char speed) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	460a      	mov	r2, r1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, Direction);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	461a      	mov	r2, r3
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	4803      	ldr	r0, [pc, #12]	; (8001150 <Motor2_On+0x24>)
 8001144:	f001 f852 	bl	80021ec <HAL_GPIO_WritePin>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020000 	.word	0x40020000

08001154 <Motor3_On>:

void Motor3_On(char Direction, char speed) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, Direction);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	461a      	mov	r2, r3
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <Motor3_On+0x28>)
 800116e:	f001 f83d 	bl	80021ec <HAL_GPIO_WritePin>

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020000 	.word	0x40020000

08001180 <Motor4_On>:

void Motor4_On(char Direction, char speed) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	71fb      	strb	r3, [r7, #7]
 800118c:	4613      	mov	r3, r2
 800118e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(DIR_M4_GPIO_Port, DIR_M4_Pin, Direction);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	461a      	mov	r2, r3
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <Motor4_On+0x24>)
 8001198:	f001 f828 	bl	80021ec <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40020800 	.word	0x40020800

080011a8 <Motor1_SetPWM>:

void Motor1_SetPWM (uint16_t speed) {
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
	TIM3->ARR = (60000 / speed) -1;
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80011b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <Motor1_SetPWM+0x34>)
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = (TIM4->ARR+1)/2;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <Motor1_SetPWM+0x38>)
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <Motor1_SetPWM+0x34>)
 80011ca:	085b      	lsrs	r3, r3, #1
 80011cc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40000400 	.word	0x40000400
 80011e0:	40000800 	.word	0x40000800

080011e4 <Motor2_SetPWM>:

void Motor2_SetPWM (uint16_t speed) {
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
	TIM4->ARR = (60000 / speed) -1;
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80011f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <Motor2_SetPWM+0x34>)
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR1 = (TIM4->ARR+1)/2;
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <Motor2_SetPWM+0x34>)
 8001200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001202:	3301      	adds	r3, #1
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <Motor2_SetPWM+0x34>)
 8001206:	085b      	lsrs	r3, r3, #1
 8001208:	6353      	str	r3, [r2, #52]	; 0x34
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40000800 	.word	0x40000800

0800121c <Motor3_SetPWM>:

void Motor3_SetPWM (uint16_t speed) {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
	TIM2->ARR = (60000 / speed) -1;
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	f64e 2260 	movw	r2, #60000	; 0xea60
 800122c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR3 = (TIM2->ARR+1)/2;
 8001238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	3301      	adds	r3, #1
 8001240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001244:	085b      	lsrs	r3, r3, #1
 8001246:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <Motor4_SetPWM>:

void Motor4_SetPWM (uint16_t speed) {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
	TIM1->ARR = (60000 / speed) -1;
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001264:	fb92 f3f3 	sdiv	r3, r2, r3
 8001268:	1e5a      	subs	r2, r3, #1
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <Motor4_SetPWM+0x34>)
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR2 = (TIM1->ARR+1)/2;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <Motor4_SetPWM+0x34>)
 8001270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001272:	3301      	adds	r3, #1
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <Motor4_SetPWM+0x34>)
 8001276:	085b      	lsrs	r3, r3, #1
 8001278:	6393      	str	r3, [r2, #56]	; 0x38
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40010000 	.word	0x40010000

0800128c <Motor1_Off>:

void Motor1_Off() {
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <Motor1_Off+0x14>)
 8001292:	2200      	movs	r2, #0
 8001294:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40000400 	.word	0x40000400

080012a4 <Motor2_Off>:

void Motor2_Off() {
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	TIM4->CCR1 = 0;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <Motor2_Off+0x14>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40000800 	.word	0x40000800

080012bc <Motor3_Off>:

void Motor3_Off() {
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	TIM2->CCR3 = 0;
 80012c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c4:	2200      	movs	r2, #0
 80012c6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <Motor4_Off>:

void Motor4_Off() {
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	TIM1->CCR2 = 0;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <Motor4_Off+0x14>)
 80012da:	2200      	movs	r2, #0
 80012dc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40010000 	.word	0x40010000

080012ec <CheckSum>:

void CheckSum(uint8_t sum){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	char str[2];
	sum = ~sum;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	71fb      	strb	r3, [r7, #7]
	sum++;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	3301      	adds	r3, #1
 8001300:	71fb      	strb	r3, [r7, #7]
	sprintf(str, "%x", sum);
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	490d      	ldr	r1, [pc, #52]	; (8001340 <CheckSum+0x54>)
 800130a:	4618      	mov	r0, r3
 800130c:	f003 fe48 	bl	8004fa0 <siprintf>
	for (int i = 0; i<sizeof (checksum); i++) {
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e00c      	b.n	8001330 <CheckSum+0x44>
		checksum[i] = str[i];
 8001316:	f107 0208 	add.w	r2, r7, #8
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	7819      	ldrb	r1, [r3, #0]
 8001320:	4a08      	ldr	r2, [pc, #32]	; (8001344 <CheckSum+0x58>)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4413      	add	r3, r2
 8001326:	460a      	mov	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<sizeof (checksum); i++) {
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d9ef      	bls.n	8001316 <CheckSum+0x2a>
	}
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	08005814 	.word	0x08005814
 8001344:	20000340 	.word	0x20000340

08001348 <clear_buffer>:

void clear_buffer(void) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
    int i;
//    for (int i = 0; i<sizeof (checksum); i++) {
//		checksum[i] = 0;
//	}
    for (i = 0; i<sizeof (package); i++) {
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	e007      	b.n	8001364 <clear_buffer+0x1c>
        package[i] = 0;
 8001354:	4a08      	ldr	r2, [pc, #32]	; (8001378 <clear_buffer+0x30>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i<sizeof (package); i++) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3301      	adds	r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b06      	cmp	r3, #6
 8001368:	d9f4      	bls.n	8001354 <clear_buffer+0xc>
    }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	20000344 	.word	0x20000344

0800137c <package_state>:
void package_state(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
    int i;
    uint8_t sum=0;
 8001382:	2300      	movs	r3, #0
 8001384:	70fb      	strb	r3, [r7, #3]
    for (i = 1; i<sizeof (package) - 2; i++) {
 8001386:	2301      	movs	r3, #1
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	e009      	b.n	80013a0 <package_state+0x24>
        sum += package[i];
 800138c:	4a25      	ldr	r2, [pc, #148]	; (8001424 <package_state+0xa8>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4413      	add	r3, r2
 8001398:	70fb      	strb	r3, [r7, #3]
    for (i = 1; i<sizeof (package) - 2; i++) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3301      	adds	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d9f2      	bls.n	800138c <package_state+0x10>
    }
    CheckSum(sum);
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff9f 	bl	80012ec <CheckSum>
    if (package[0] == 0xFF) {
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <package_state+0xa8>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2bff      	cmp	r3, #255	; 0xff
 80013b4:	d12f      	bne.n	8001416 <package_state+0x9a>
        if (package[5] == checksum[0] && package[6] == checksum[1]) {
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <package_state+0xa8>)
 80013b8:	795a      	ldrb	r2, [r3, #5]
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <package_state+0xac>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d126      	bne.n	8001410 <package_state+0x94>
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <package_state+0xa8>)
 80013c4:	799a      	ldrb	r2, [r3, #6]
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <package_state+0xac>)
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d120      	bne.n	8001410 <package_state+0x94>
            if (package[2] == 0x01) {
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <package_state+0xa8>)
 80013d0:	789b      	ldrb	r3, [r3, #2]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d109      	bne.n	80013ea <package_state+0x6e>
            	//jointjog
            	HAL_UART_Transmit(&huart2,acknowledge,sizeof(acknowledge),100);
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	2205      	movs	r2, #5
 80013da:	4914      	ldr	r1, [pc, #80]	; (800142c <package_state+0xb0>)
 80013dc:	4814      	ldr	r0, [pc, #80]	; (8001430 <package_state+0xb4>)
 80013de:	f002 fe32 	bl	8004046 <HAL_UART_Transmit>
                state_check = 1;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <package_state+0xb8>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
            if (package[2] == 0x01) {
 80013e8:	e018      	b.n	800141c <package_state+0xa0>
            } else if (package[1] == 0x02) {
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <package_state+0xa8>)
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d103      	bne.n	80013fa <package_state+0x7e>
                state_check = 2;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <package_state+0xb8>)
 80013f4:	2202      	movs	r2, #2
 80013f6:	701a      	strb	r2, [r3, #0]
            if (package[2] == 0x01) {
 80013f8:	e010      	b.n	800141c <package_state+0xa0>
            } else if (package[1] == 0x03) {
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <package_state+0xa8>)
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d103      	bne.n	800140a <package_state+0x8e>
                state_check = 3;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <package_state+0xb8>)
 8001404:	2203      	movs	r2, #3
 8001406:	701a      	strb	r2, [r3, #0]
            if (package[2] == 0x01) {
 8001408:	e008      	b.n	800141c <package_state+0xa0>
            } else {
                //err();
                clear_buffer();
 800140a:	f7ff ff9d 	bl	8001348 <clear_buffer>
            if (package[2] == 0x01) {
 800140e:	e005      	b.n	800141c <package_state+0xa0>
            }
        } else {
            //err();
            clear_buffer();
 8001410:	f7ff ff9a 	bl	8001348 <clear_buffer>
////
////    } else if (state_check == 3) { case
////
//    }
//    state_check = 0;
}
 8001414:	e002      	b.n	800141c <package_state+0xa0>
        clear_buffer();
 8001416:	f7ff ff97 	bl	8001348 <clear_buffer>
}
 800141a:	e7ff      	b.n	800141c <package_state+0xa0>
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000344 	.word	0x20000344
 8001428:	20000340 	.word	0x20000340
 800142c:	20000000 	.word	0x20000000
 8001430:	200002b4 	.word	0x200002b4
 8001434:	200000a8 	.word	0x200000a8

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	e7fe      	b.n	8001440 <Error_Handler+0x8>
	...

08001444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <HAL_MspInit+0x4c>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_MspInit+0x4c>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001482:	2007      	movs	r0, #7
 8001484:	f000 fc4a 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_SPI_MspInit+0x84>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12c      	bne.n	8001510 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_SPI_MspInit+0x88>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_SPI_MspInit+0x88>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_SPI_MspInit+0x88>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_SPI_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_SPI_MspInit+0x88>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_SPI_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001500:	2305      	movs	r3, #5
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <HAL_SPI_MspInit+0x8c>)
 800150c:	f000 fcda 	bl	8001ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40003800 	.word	0x40003800
 800151c:	40023800 	.word	0x40023800
 8001520:	40020400 	.word	0x40020400

08001524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a36      	ldr	r2, [pc, #216]	; (800160c <HAL_TIM_Base_MspInit+0xe8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10e      	bne.n	8001554 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a34      	ldr	r2, [pc, #208]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b32      	ldr	r3, [pc, #200]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001552:	e056      	b.n	8001602 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155c:	d10e      	bne.n	800157c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	69bb      	ldr	r3, [r7, #24]
}
 800157a:	e042      	b.n	8001602 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a24      	ldr	r2, [pc, #144]	; (8001614 <HAL_TIM_Base_MspInit+0xf0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10e      	bne.n	80015a4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
}
 80015a2:	e02e      	b.n	8001602 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <HAL_TIM_Base_MspInit+0xf4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10e      	bne.n	80015cc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
}
 80015ca:	e01a      	b.n	8001602 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM14)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a12      	ldr	r2, [pc, #72]	; (800161c <HAL_TIM_Base_MspInit+0xf8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d115      	bne.n	8001602 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_TIM_Base_MspInit+0xec>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	202d      	movs	r0, #45	; 0x2d
 80015f8:	f000 fb9b 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80015fc:	202d      	movs	r0, #45	; 0x2d
 80015fe:	f000 fbb4 	bl	8001d6a <HAL_NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40010000 	.word	0x40010000
 8001610:	40023800 	.word	0x40023800
 8001614:	40000400 	.word	0x40000400
 8001618:	40000800 	.word	0x40000800
 800161c:	40002000 	.word	0x40002000

08001620 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_TIM_PWM_MspInit+0x48>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d115      	bne.n	800165e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_TIM_PWM_MspInit+0x4c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <HAL_TIM_PWM_MspInit+0x4c>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_TIM_PWM_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	202d      	movs	r0, #45	; 0x2d
 8001654:	f000 fb6d 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001658:	202d      	movs	r0, #45	; 0x2d
 800165a:	f000 fb86 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40010400 	.word	0x40010400
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a5b      	ldr	r2, [pc, #364]	; (80017fc <HAL_TIM_MspPostInit+0x18c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d11f      	bne.n	80016d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a59      	ldr	r2, [pc, #356]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b57      	ldr	r3, [pc, #348]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PUL_M4_Pin;
 80016ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_M4_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	484e      	ldr	r0, [pc, #312]	; (8001804 <HAL_TIM_MspPostInit+0x194>)
 80016cc:	f000 fbfa 	bl	8001ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80016d0:	e08f      	b.n	80017f2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016da:	d11f      	bne.n	800171c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	4a46      	ldr	r2, [pc, #280]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	6313      	str	r3, [r2, #48]	; 0x30
 80016ec:	4b44      	ldr	r3, [pc, #272]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PUL_M3_Pin;
 80016f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800170a:	2301      	movs	r3, #1
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_M3_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	483c      	ldr	r0, [pc, #240]	; (8001808 <HAL_TIM_MspPostInit+0x198>)
 8001716:	f000 fbd5 	bl	8001ec4 <HAL_GPIO_Init>
}
 800171a:	e06a      	b.n	80017f2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a3a      	ldr	r2, [pc, #232]	; (800180c <HAL_TIM_MspPostInit+0x19c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d11e      	bne.n	8001764 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a34      	ldr	r2, [pc, #208]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b32      	ldr	r3, [pc, #200]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PUL_M1_Pin;
 8001742:	2340      	movs	r3, #64	; 0x40
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001752:	2302      	movs	r3, #2
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_M1_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	4829      	ldr	r0, [pc, #164]	; (8001804 <HAL_TIM_MspPostInit+0x194>)
 800175e:	f000 fbb1 	bl	8001ec4 <HAL_GPIO_Init>
}
 8001762:	e046      	b.n	80017f2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <HAL_TIM_MspPostInit+0x1a0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d11e      	bne.n	80017ac <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a22      	ldr	r2, [pc, #136]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PUL_M2_Pin;
 800178a:	2340      	movs	r3, #64	; 0x40
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800179a:	2302      	movs	r3, #2
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PUL_M2_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4818      	ldr	r0, [pc, #96]	; (8001808 <HAL_TIM_MspPostInit+0x198>)
 80017a6:	f000 fb8d 	bl	8001ec4 <HAL_GPIO_Init>
}
 80017aa:	e022      	b.n	80017f2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM8)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_TIM_MspPostInit+0x1a4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11d      	bne.n	80017f2 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_TIM_MspPostInit+0x190>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d2:	2340      	movs	r3, #64	; 0x40
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017e2:	2303      	movs	r3, #3
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	480a      	ldr	r0, [pc, #40]	; (8001818 <HAL_TIM_MspPostInit+0x1a8>)
 80017ee:	f000 fb69 	bl	8001ec4 <HAL_GPIO_Init>
}
 80017f2:	bf00      	nop
 80017f4:	3730      	adds	r7, #48	; 0x30
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40010000 	.word	0x40010000
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40000400 	.word	0x40000400
 8001810:	40000800 	.word	0x40000800
 8001814:	40010400 	.word	0x40010400
 8001818:	40020800 	.word	0x40020800

0800181c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a36      	ldr	r2, [pc, #216]	; (8001914 <HAL_UART_MspInit+0xf8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d134      	bne.n	80018a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	4b35      	ldr	r3, [pc, #212]	; (8001918 <HAL_UART_MspInit+0xfc>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a34      	ldr	r2, [pc, #208]	; (8001918 <HAL_UART_MspInit+0xfc>)
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_UART_MspInit+0xfc>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_UART_MspInit+0xfc>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <HAL_UART_MspInit+0xfc>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_UART_MspInit+0xfc>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001876:	230c      	movs	r3, #12
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001886:	2307      	movs	r3, #7
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	4822      	ldr	r0, [pc, #136]	; (800191c <HAL_UART_MspInit+0x100>)
 8001892:	f000 fb17 	bl	8001ec4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	2026      	movs	r0, #38	; 0x26
 800189c:	f000 fa49 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018a0:	2026      	movs	r0, #38	; 0x26
 80018a2:	f000 fa62 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018a6:	e031      	b.n	800190c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <HAL_UART_MspInit+0x104>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12c      	bne.n	800190c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_UART_MspInit+0xfc>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_UART_MspInit+0xfc>)
 80018bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_UART_MspInit+0xfc>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_UART_MspInit+0xfc>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <HAL_UART_MspInit+0xfc>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_UART_MspInit+0xfc>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAX485_TX_Pin|MAX485_RX_Pin;
 80018ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018fc:	2307      	movs	r3, #7
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	4807      	ldr	r0, [pc, #28]	; (8001924 <HAL_UART_MspInit+0x108>)
 8001908:	f000 fadc 	bl	8001ec4 <HAL_GPIO_Init>
}
 800190c:	bf00      	nop
 800190e:	3730      	adds	r7, #48	; 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40004400 	.word	0x40004400
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000
 8001920:	40004800 	.word	0x40004800
 8001924:	40020800 	.word	0x40020800

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800192c:	e7fe      	b.n	800192c <NMI_Handler+0x4>

0800192e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <MemManage_Handler+0x4>

0800193a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <UsageFault_Handler+0x4>

08001946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001974:	f000 f8e2 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <USART2_IRQHandler+0x10>)
 8001982:	f002 fc23 	bl	80041cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200002b4 	.word	0x200002b4

08001990 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8001996:	f001 fc5d 	bl	8003254 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800199a:	4803      	ldr	r0, [pc, #12]	; (80019a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800199c:	f001 fc5a 	bl	8003254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000104 	.word	0x20000104
 80019a8:	200002f8 	.word	0x200002f8

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f003 faae 	bl	8004f3c <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20020000 	.word	0x20020000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	2000009c 	.word	0x2000009c
 8001a14:	20000360 	.word	0x20000360

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <SystemInit+0x28>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <SystemInit+0x28>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <SystemInit+0x28>)
 8001a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a32:	609a      	str	r2, [r3, #8]
#endif
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a4a:	e003      	b.n	8001a54 <LoopCopyDataInit>

08001a4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a52:	3104      	adds	r1, #4

08001a54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a54:	480b      	ldr	r0, [pc, #44]	; (8001a84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a5c:	d3f6      	bcc.n	8001a4c <CopyDataInit>
  ldr  r2, =_sbss
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a60:	e002      	b.n	8001a68 <LoopFillZerobss>

08001a62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a64:	f842 3b04 	str.w	r3, [r2], #4

08001a68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a6c:	d3f9      	bcc.n	8001a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a6e:	f7ff ffd3 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a72:	f003 fa69 	bl	8004f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a76:	f7fe fea3 	bl	80007c0 <main>
  bx  lr    
 8001a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a80:	08005874 	.word	0x08005874
  ldr  r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a88:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001a8c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001a90:	20000360 	.word	0x20000360

08001a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_Init+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <HAL_Init+0x40>)
 8001aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_Init+0x40>)
 8001aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_Init+0x40>)
 8001aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f000 f92b 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 f808 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001acc:	f7ff fcba 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x54>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_InitTick+0x58>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f943 	bl	8001d86 <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00e      	b.n	8001b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d80a      	bhi.n	8001b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f000 f90b 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_InitTick+0x5c>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000010 	.word	0x20000010
 8001b38:	2000000c 	.word	0x2000000c

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000010 	.word	0x20000010
 8001b60:	2000034c 	.word	0x2000034c

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2000034c 	.word	0x2000034c

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff3e 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff8e 	bl	8001c70 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5d 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff31 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff feda 	bl	8001b64 <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d008      	beq.n	8001dd0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e052      	b.n	8001e76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0216 	bic.w	r2, r2, #22
 8001dde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d103      	bne.n	8001e00 <HAL_DMA_Abort+0x62>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0208 	bic.w	r2, r2, #8
 8001e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e20:	e013      	b.n	8001e4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e22:	f7ff fe9f 	bl	8001b64 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d90c      	bls.n	8001e4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e015      	b.n	8001e76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e4      	bne.n	8001e22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	223f      	movs	r2, #63	; 0x3f
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d004      	beq.n	8001e9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e00c      	b.n	8001eb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	e165      	b.n	80021ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f040 8154 	bne.w	80021a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d005      	beq.n	8001f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d130      	bne.n	8001f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 0201 	and.w	r2, r3, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d017      	beq.n	8001fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d123      	bne.n	8002008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	08da      	lsrs	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	08da      	lsrs	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3208      	adds	r2, #8
 8002002:	69b9      	ldr	r1, [r7, #24]
 8002004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80ae 	beq.w	80021a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b5d      	ldr	r3, [pc, #372]	; (80021c4 <HAL_GPIO_Init+0x300>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a5c      	ldr	r2, [pc, #368]	; (80021c4 <HAL_GPIO_Init+0x300>)
 8002054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <HAL_GPIO_Init+0x300>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002066:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_GPIO_Init+0x304>)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	220f      	movs	r2, #15
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4f      	ldr	r2, [pc, #316]	; (80021cc <HAL_GPIO_Init+0x308>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d025      	beq.n	80020de <HAL_GPIO_Init+0x21a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4e      	ldr	r2, [pc, #312]	; (80021d0 <HAL_GPIO_Init+0x30c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <HAL_GPIO_Init+0x216>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4d      	ldr	r2, [pc, #308]	; (80021d4 <HAL_GPIO_Init+0x310>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x212>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4c      	ldr	r2, [pc, #304]	; (80021d8 <HAL_GPIO_Init+0x314>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x20e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4b      	ldr	r2, [pc, #300]	; (80021dc <HAL_GPIO_Init+0x318>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x20a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4a      	ldr	r2, [pc, #296]	; (80021e0 <HAL_GPIO_Init+0x31c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x206>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a49      	ldr	r2, [pc, #292]	; (80021e4 <HAL_GPIO_Init+0x320>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x202>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e00c      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020c6:	2307      	movs	r3, #7
 80020c8:	e00a      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020ca:	2305      	movs	r3, #5
 80020cc:	e008      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020ce:	2304      	movs	r3, #4
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020d2:	2303      	movs	r3, #3
 80020d4:	e004      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e002      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020de:	2300      	movs	r3, #0
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	f002 0203 	and.w	r2, r2, #3
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	4093      	lsls	r3, r2
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f0:	4935      	ldr	r1, [pc, #212]	; (80021c8 <HAL_GPIO_Init+0x304>)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fe:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <HAL_GPIO_Init+0x324>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002122:	4a31      	ldr	r2, [pc, #196]	; (80021e8 <HAL_GPIO_Init+0x324>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002128:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <HAL_GPIO_Init+0x324>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800214c:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <HAL_GPIO_Init+0x324>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_GPIO_Init+0x324>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002176:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_GPIO_Init+0x324>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_GPIO_Init+0x324>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a0:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <HAL_GPIO_Init+0x324>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3301      	adds	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	f67f ae96 	bls.w	8001ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40013800 	.word	0x40013800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020c00 	.word	0x40020c00
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40021400 	.word	0x40021400
 80021e4:	40021800 	.word	0x40021800
 80021e8:	40013c00 	.word	0x40013c00

080021ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
 80021f8:	4613      	mov	r3, r2
 80021fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021fc:	787b      	ldrb	r3, [r7, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002208:	e003      	b.n	8002212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	041a      	lsls	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	619a      	str	r2, [r3, #24]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800224c:	f7ff fc8a 	bl	8001b64 <HAL_GetTick>
 8002250:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002252:	e009      	b.n	8002268 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002254:	f7ff fc86 	bl	8001b64 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002262:	d901      	bls.n	8002268 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e01f      	b.n	80022a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002274:	d1ee      	bne.n	8002254 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800227c:	f7ff fc72 	bl	8001b64 <HAL_GetTick>
 8002280:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002282:	e009      	b.n	8002298 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002284:	f7ff fc6e 	bl	8001b64 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002292:	d901      	bls.n	8002298 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e007      	b.n	80022a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022a4:	d1ee      	bne.n	8002284 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	420e0040 	.word	0x420e0040
 80022b8:	40007000 	.word	0x40007000
 80022bc:	420e0044 	.word	0x420e0044

080022c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0cc      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b68      	ldr	r3, [pc, #416]	; (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d90c      	bls.n	80022fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b65      	ldr	r3, [pc, #404]	; (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b63      	ldr	r3, [pc, #396]	; (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0b8      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d020      	beq.n	800234a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002314:	4b59      	ldr	r3, [pc, #356]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a58      	ldr	r2, [pc, #352]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800231e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800232c:	4b53      	ldr	r3, [pc, #332]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4a52      	ldr	r2, [pc, #328]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002338:	4b50      	ldr	r3, [pc, #320]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	494d      	ldr	r1, [pc, #308]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d044      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	4b47      	ldr	r3, [pc, #284]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d119      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e07f      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d003      	beq.n	800237e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800237a:	2b03      	cmp	r3, #3
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237e:	4b3f      	ldr	r3, [pc, #252]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e06f      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e067      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239e:	4b37      	ldr	r3, [pc, #220]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f023 0203 	bic.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4934      	ldr	r1, [pc, #208]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b0:	f7ff fbd8 	bl	8001b64 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7ff fbd4 	bl	8001b64 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e04f      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 020c 	and.w	r2, r3, #12
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1eb      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d20c      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e032      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4916      	ldr	r1, [pc, #88]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	490e      	ldr	r1, [pc, #56]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002446:	f000 f855 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 800244a:	4602      	mov	r2, r0
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	490a      	ldr	r1, [pc, #40]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	5ccb      	ldrb	r3, [r1, r3]
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fb38 	bl	8001adc <HAL_InitTick>

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00
 800247c:	40023800 	.word	0x40023800
 8002480:	08005818 	.word	0x08005818
 8002484:	20000008 	.word	0x20000008
 8002488:	2000000c 	.word	0x2000000c

0800248c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000008 	.word	0x20000008

080024a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a8:	f7ff fff0 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0a9b      	lsrs	r3, r3, #10
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4903      	ldr	r1, [pc, #12]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	08005828 	.word	0x08005828

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d0:	f7ff ffdc 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0b5b      	lsrs	r3, r3, #13
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4903      	ldr	r1, [pc, #12]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08005828 	.word	0x08005828

080024f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f8:	b088      	sub	sp, #32
 80024fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002510:	4bce      	ldr	r3, [pc, #824]	; (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b0c      	cmp	r3, #12
 800251a:	f200 818d 	bhi.w	8002838 <HAL_RCC_GetSysClockFreq+0x344>
 800251e:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <HAL_RCC_GetSysClockFreq+0x30>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	08002559 	.word	0x08002559
 8002528:	08002839 	.word	0x08002839
 800252c:	08002839 	.word	0x08002839
 8002530:	08002839 	.word	0x08002839
 8002534:	0800255f 	.word	0x0800255f
 8002538:	08002839 	.word	0x08002839
 800253c:	08002839 	.word	0x08002839
 8002540:	08002839 	.word	0x08002839
 8002544:	08002565 	.word	0x08002565
 8002548:	08002839 	.word	0x08002839
 800254c:	08002839 	.word	0x08002839
 8002550:	08002839 	.word	0x08002839
 8002554:	080026d9 	.word	0x080026d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002558:	4bbd      	ldr	r3, [pc, #756]	; (8002850 <HAL_RCC_GetSysClockFreq+0x35c>)
 800255a:	61bb      	str	r3, [r7, #24]
       break;
 800255c:	e16f      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255e:	4bbd      	ldr	r3, [pc, #756]	; (8002854 <HAL_RCC_GetSysClockFreq+0x360>)
 8002560:	61bb      	str	r3, [r7, #24]
      break;
 8002562:	e16c      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002564:	4bb9      	ldr	r3, [pc, #740]	; (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800256c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256e:	4bb7      	ldr	r3, [pc, #732]	; (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d053      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257a:	4bb4      	ldr	r3, [pc, #720]	; (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	461a      	mov	r2, r3
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	f240 10ff 	movw	r0, #511	; 0x1ff
 800258a:	f04f 0100 	mov.w	r1, #0
 800258e:	ea02 0400 	and.w	r4, r2, r0
 8002592:	603c      	str	r4, [r7, #0]
 8002594:	400b      	ands	r3, r1
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	e9d7 4500 	ldrd	r4, r5, [r7]
 800259c:	4620      	mov	r0, r4
 800259e:	4629      	mov	r1, r5
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	014b      	lsls	r3, r1, #5
 80025aa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025ae:	0142      	lsls	r2, r0, #5
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	4623      	mov	r3, r4
 80025b6:	1ac0      	subs	r0, r0, r3
 80025b8:	462b      	mov	r3, r5
 80025ba:	eb61 0103 	sbc.w	r1, r1, r3
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	018b      	lsls	r3, r1, #6
 80025c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025cc:	0182      	lsls	r2, r0, #6
 80025ce:	1a12      	subs	r2, r2, r0
 80025d0:	eb63 0301 	sbc.w	r3, r3, r1
 80025d4:	f04f 0000 	mov.w	r0, #0
 80025d8:	f04f 0100 	mov.w	r1, #0
 80025dc:	00d9      	lsls	r1, r3, #3
 80025de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025e2:	00d0      	lsls	r0, r2, #3
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4621      	mov	r1, r4
 80025ea:	1852      	adds	r2, r2, r1
 80025ec:	4629      	mov	r1, r5
 80025ee:	eb43 0101 	adc.w	r1, r3, r1
 80025f2:	460b      	mov	r3, r1
 80025f4:	f04f 0000 	mov.w	r0, #0
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	0259      	lsls	r1, r3, #9
 80025fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002602:	0250      	lsls	r0, r2, #9
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	461a      	mov	r2, r3
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	f7fd fe4c 	bl	80002b0 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4613      	mov	r3, r2
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	e04c      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b8a      	ldr	r3, [pc, #552]	; (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	461a      	mov	r2, r3
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	ea02 0a00 	and.w	sl, r2, r0
 800263a:	ea03 0b01 	and.w	fp, r3, r1
 800263e:	4650      	mov	r0, sl
 8002640:	4659      	mov	r1, fp
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	014b      	lsls	r3, r1, #5
 800264c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002650:	0142      	lsls	r2, r0, #5
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	ebb0 000a 	subs.w	r0, r0, sl
 800265a:	eb61 010b 	sbc.w	r1, r1, fp
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	018b      	lsls	r3, r1, #6
 8002668:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800266c:	0182      	lsls	r2, r0, #6
 800266e:	1a12      	subs	r2, r2, r0
 8002670:	eb63 0301 	sbc.w	r3, r3, r1
 8002674:	f04f 0000 	mov.w	r0, #0
 8002678:	f04f 0100 	mov.w	r1, #0
 800267c:	00d9      	lsls	r1, r3, #3
 800267e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002682:	00d0      	lsls	r0, r2, #3
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	eb12 020a 	adds.w	r2, r2, sl
 800268c:	eb43 030b 	adc.w	r3, r3, fp
 8002690:	f04f 0000 	mov.w	r0, #0
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	0299      	lsls	r1, r3, #10
 800269a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800269e:	0290      	lsls	r0, r2, #10
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	f7fd fdfe 	bl	80002b0 <__aeabi_uldivmod>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4613      	mov	r3, r2
 80026ba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026bc:	4b63      	ldr	r3, [pc, #396]	; (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	61bb      	str	r3, [r7, #24]
      break;
 80026d6:	e0b2      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d8:	4b5c      	ldr	r3, [pc, #368]	; (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026e2:	4b5a      	ldr	r3, [pc, #360]	; (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d04d      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ee:	4b57      	ldr	r3, [pc, #348]	; (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	099b      	lsrs	r3, r3, #6
 80026f4:	461a      	mov	r2, r3
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026fe:	f04f 0100 	mov.w	r1, #0
 8002702:	ea02 0800 	and.w	r8, r2, r0
 8002706:	ea03 0901 	and.w	r9, r3, r1
 800270a:	4640      	mov	r0, r8
 800270c:	4649      	mov	r1, r9
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	014b      	lsls	r3, r1, #5
 8002718:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800271c:	0142      	lsls	r2, r0, #5
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	ebb0 0008 	subs.w	r0, r0, r8
 8002726:	eb61 0109 	sbc.w	r1, r1, r9
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	018b      	lsls	r3, r1, #6
 8002734:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002738:	0182      	lsls	r2, r0, #6
 800273a:	1a12      	subs	r2, r2, r0
 800273c:	eb63 0301 	sbc.w	r3, r3, r1
 8002740:	f04f 0000 	mov.w	r0, #0
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	00d9      	lsls	r1, r3, #3
 800274a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800274e:	00d0      	lsls	r0, r2, #3
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	eb12 0208 	adds.w	r2, r2, r8
 8002758:	eb43 0309 	adc.w	r3, r3, r9
 800275c:	f04f 0000 	mov.w	r0, #0
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	0259      	lsls	r1, r3, #9
 8002766:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800276a:	0250      	lsls	r0, r2, #9
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	461a      	mov	r2, r3
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	f7fd fd98 	bl	80002b0 <__aeabi_uldivmod>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4613      	mov	r3, r2
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	e04a      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278a:	4b30      	ldr	r3, [pc, #192]	; (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	099b      	lsrs	r3, r3, #6
 8002790:	461a      	mov	r2, r3
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	f240 10ff 	movw	r0, #511	; 0x1ff
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	ea02 0400 	and.w	r4, r2, r0
 80027a2:	ea03 0501 	and.w	r5, r3, r1
 80027a6:	4620      	mov	r0, r4
 80027a8:	4629      	mov	r1, r5
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	014b      	lsls	r3, r1, #5
 80027b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027b8:	0142      	lsls	r2, r0, #5
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	1b00      	subs	r0, r0, r4
 80027c0:	eb61 0105 	sbc.w	r1, r1, r5
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	018b      	lsls	r3, r1, #6
 80027ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027d2:	0182      	lsls	r2, r0, #6
 80027d4:	1a12      	subs	r2, r2, r0
 80027d6:	eb63 0301 	sbc.w	r3, r3, r1
 80027da:	f04f 0000 	mov.w	r0, #0
 80027de:	f04f 0100 	mov.w	r1, #0
 80027e2:	00d9      	lsls	r1, r3, #3
 80027e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e8:	00d0      	lsls	r0, r2, #3
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	1912      	adds	r2, r2, r4
 80027f0:	eb45 0303 	adc.w	r3, r5, r3
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	0299      	lsls	r1, r3, #10
 80027fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002802:	0290      	lsls	r0, r2, #10
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	461a      	mov	r2, r3
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	f7fd fd4c 	bl	80002b0 <__aeabi_uldivmod>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4613      	mov	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0f1b      	lsrs	r3, r3, #28
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	61bb      	str	r3, [r7, #24]
      break;
 8002836:	e002      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetSysClockFreq+0x35c>)
 800283a:	61bb      	str	r3, [r7, #24]
      break;
 800283c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283e:	69bb      	ldr	r3, [r7, #24]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200

08002858 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e28d      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8083 	beq.w	800297e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002878:	4b94      	ldr	r3, [pc, #592]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b04      	cmp	r3, #4
 8002882:	d019      	beq.n	80028b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002884:	4b91      	ldr	r3, [pc, #580]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800288c:	2b08      	cmp	r3, #8
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002890:	4b8e      	ldr	r3, [pc, #568]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800289c:	d00c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b8b      	ldr	r3, [pc, #556]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b88      	ldr	r3, [pc, #544]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b84      	ldr	r3, [pc, #528]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x124>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d157      	bne.n	800297c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e25a      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x90>
 80028da:	4b7c      	ldr	r3, [pc, #496]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7b      	ldr	r2, [pc, #492]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xcc>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0xb4>
 80028f2:	4b76      	ldr	r3, [pc, #472]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a75      	ldr	r2, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a72      	ldr	r2, [pc, #456]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xcc>
 800290c:	4b6f      	ldr	r3, [pc, #444]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6e      	ldr	r2, [pc, #440]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b6c      	ldr	r3, [pc, #432]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6b      	ldr	r2, [pc, #428]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff f91a 	bl	8001b64 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff f916 	bl	8001b64 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e21f      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b61      	ldr	r3, [pc, #388]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xdc>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7ff f906 	bl	8001b64 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff f902 	bl	8001b64 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e20b      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b57      	ldr	r3, [pc, #348]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x104>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d06f      	beq.n	8002a6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800298a:	4b50      	ldr	r3, [pc, #320]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d017      	beq.n	80029c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002996:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d105      	bne.n	80029ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029a2:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d11c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b44      	ldr	r3, [pc, #272]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	4b41      	ldr	r3, [pc, #260]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_RCC_OscConfig+0x186>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e1d3      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4937      	ldr	r1, [pc, #220]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	e03a      	b.n	8002a6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fc:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <HAL_RCC_OscConfig+0x278>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7ff f8af 	bl	8001b64 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7ff f8ab 	bl	8001b64 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1b4      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4925      	ldr	r1, [pc, #148]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCC_OscConfig+0x278>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7ff f88e 	bl	8001b64 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7ff f88a 	bl	8001b64 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e193      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d036      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_RCC_OscConfig+0x27c>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7ff f86e 	bl	8001b64 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7ff f86a 	bl	8001b64 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e173      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x234>
 8002aaa:	e01b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7ff f857 	bl	8001b64 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab8:	e00e      	b.n	8002ad8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aba:	f7ff f853 	bl	8001b64 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d907      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e15c      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	42470000 	.word	0x42470000
 8002ad4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad8:	4b8a      	ldr	r3, [pc, #552]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ea      	bne.n	8002aba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8097 	beq.w	8002c20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af6:	4b83      	ldr	r3, [pc, #524]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	4b7f      	ldr	r3, [pc, #508]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a7e      	ldr	r2, [pc, #504]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b7c      	ldr	r3, [pc, #496]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b79      	ldr	r3, [pc, #484]	; (8002d08 <HAL_RCC_OscConfig+0x4b0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d118      	bne.n	8002b60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2e:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCC_OscConfig+0x4b0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a75      	ldr	r2, [pc, #468]	; (8002d08 <HAL_RCC_OscConfig+0x4b0>)
 8002b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7ff f813 	bl	8001b64 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b42:	f7ff f80f 	bl	8001b64 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e118      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	4b6c      	ldr	r3, [pc, #432]	; (8002d08 <HAL_RCC_OscConfig+0x4b0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x31e>
 8002b68:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a65      	ldr	r2, [pc, #404]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x358>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x340>
 8002b7e:	4b61      	ldr	r3, [pc, #388]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a60      	ldr	r2, [pc, #384]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8a:	4b5e      	ldr	r3, [pc, #376]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a5d      	ldr	r2, [pc, #372]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x358>
 8002b98:	4b5a      	ldr	r3, [pc, #360]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a59      	ldr	r2, [pc, #356]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba4:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a56      	ldr	r2, [pc, #344]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002baa:	f023 0304 	bic.w	r3, r3, #4
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d015      	beq.n	8002be4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe ffd4 	bl	8001b64 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc0:	f7fe ffd0 	bl	8001b64 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0d7      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd6:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0ee      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x368>
 8002be2:	e014      	b.n	8002c0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fe ffbe 	bl	8001b64 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7fe ffba 	bl	8001b64 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0c1      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c02:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ee      	bne.n	8002bec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c14:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	4a3a      	ldr	r2, [pc, #232]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80ad 	beq.w	8002d84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d060      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d145      	bne.n	8002cca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <HAL_RCC_OscConfig+0x4b4>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe ff8e 	bl	8001b64 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe ff8a 	bl	8001b64 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e093      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	019b      	lsls	r3, r3, #6
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	3b01      	subs	r3, #1
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	071b      	lsls	r3, r3, #28
 8002c96:	491b      	ldr	r1, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_RCC_OscConfig+0x4b4>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe ff5f 	bl	8001b64 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002caa:	f7fe ff5b 	bl	8001b64 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e064      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x452>
 8002cc8:	e05c      	b.n	8002d84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <HAL_RCC_OscConfig+0x4b4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe ff48 	bl	8001b64 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe ff44 	bl	8001b64 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e04d      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x480>
 8002cf6:	e045      	b.n	8002d84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e040      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <HAL_RCC_OscConfig+0x538>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d030      	beq.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d129      	bne.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d122      	bne.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d119      	bne.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d10f      	bne.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800

08002d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07b      	b.n	8002e9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db6:	d009      	beq.n	8002dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	61da      	str	r2, [r3, #28]
 8002dbe:	e005      	b.n	8002dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe fb54 	bl	8001494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	ea42 0103 	orr.w	r1, r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	f003 0104 	and.w	r1, r3, #4
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	f003 0210 	and.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e041      	b.n	8002f3c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fe fb29 	bl	8001524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f000 fc6f 	bl	80037c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d001      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e04e      	b.n	8002ffa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a23      	ldr	r2, [pc, #140]	; (8003008 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d01d      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	; (800300c <HAL_TIM_Base_Start_IT+0xc8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d013      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	; (800301c <HAL_TIM_Base_Start_IT+0xd8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d111      	bne.n	8002fe8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d010      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe6:	e007      	b.n	8002ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800
 8003014:	40000c00 	.word	0x40000c00
 8003018:	40010400 	.word	0x40010400
 800301c:	40014000 	.word	0x40014000
 8003020:	40001800 	.word	0x40001800

08003024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e041      	b.n	80030ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fe fae8 	bl	8001620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f000 fbb0 	bl	80037c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <HAL_TIM_PWM_Start+0x24>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e022      	b.n	800312e <HAL_TIM_PWM_Start+0x6a>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d109      	bne.n	8003102 <HAL_TIM_PWM_Start+0x3e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	bf14      	ite	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	2300      	moveq	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	e015      	b.n	800312e <HAL_TIM_PWM_Start+0x6a>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d109      	bne.n	800311c <HAL_TIM_PWM_Start+0x58>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e008      	b.n	800312e <HAL_TIM_PWM_Start+0x6a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e07c      	b.n	8003230 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <HAL_TIM_PWM_Start+0x82>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003144:	e013      	b.n	800316e <HAL_TIM_PWM_Start+0xaa>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b04      	cmp	r3, #4
 800314a:	d104      	bne.n	8003156 <HAL_TIM_PWM_Start+0x92>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003154:	e00b      	b.n	800316e <HAL_TIM_PWM_Start+0xaa>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b08      	cmp	r3, #8
 800315a:	d104      	bne.n	8003166 <HAL_TIM_PWM_Start+0xa2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003164:	e003      	b.n	800316e <HAL_TIM_PWM_Start+0xaa>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2201      	movs	r2, #1
 8003174:	6839      	ldr	r1, [r7, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fe10 	bl	8003d9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2d      	ldr	r2, [pc, #180]	; (8003238 <HAL_TIM_PWM_Start+0x174>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_TIM_PWM_Start+0xcc>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2c      	ldr	r2, [pc, #176]	; (800323c <HAL_TIM_PWM_Start+0x178>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_TIM_PWM_Start+0xd0>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_TIM_PWM_Start+0xd2>
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a22      	ldr	r2, [pc, #136]	; (8003238 <HAL_TIM_PWM_Start+0x174>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d022      	beq.n	80031fa <HAL_TIM_PWM_Start+0x136>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031bc:	d01d      	beq.n	80031fa <HAL_TIM_PWM_Start+0x136>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1f      	ldr	r2, [pc, #124]	; (8003240 <HAL_TIM_PWM_Start+0x17c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d018      	beq.n	80031fa <HAL_TIM_PWM_Start+0x136>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <HAL_TIM_PWM_Start+0x180>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_TIM_PWM_Start+0x136>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <HAL_TIM_PWM_Start+0x184>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00e      	beq.n	80031fa <HAL_TIM_PWM_Start+0x136>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a16      	ldr	r2, [pc, #88]	; (800323c <HAL_TIM_PWM_Start+0x178>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d009      	beq.n	80031fa <HAL_TIM_PWM_Start+0x136>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a18      	ldr	r2, [pc, #96]	; (800324c <HAL_TIM_PWM_Start+0x188>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_TIM_PWM_Start+0x136>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a16      	ldr	r2, [pc, #88]	; (8003250 <HAL_TIM_PWM_Start+0x18c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d111      	bne.n	800321e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b06      	cmp	r3, #6
 800320a:	d010      	beq.n	800322e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321c:	e007      	b.n	800322e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0201 	orr.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40010000 	.word	0x40010000
 800323c:	40010400 	.word	0x40010400
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800
 8003248:	40000c00 	.word	0x40000c00
 800324c:	40014000 	.word	0x40014000
 8003250:	40001800 	.word	0x40001800

08003254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b02      	cmp	r3, #2
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b02      	cmp	r3, #2
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0202 	mvn.w	r2, #2
 8003280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fa77 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fa69 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fa7a 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d122      	bne.n	8003304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d11b      	bne.n	8003304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0204 	mvn.w	r2, #4
 80032d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa4d 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 80032f0:	e005      	b.n	80032fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fa3f 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fa50 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b08      	cmp	r3, #8
 8003310:	d122      	bne.n	8003358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b08      	cmp	r3, #8
 800331e:	d11b      	bne.n	8003358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0208 	mvn.w	r2, #8
 8003328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2204      	movs	r2, #4
 800332e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa23 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fa15 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fa26 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b10      	cmp	r3, #16
 8003364:	d122      	bne.n	80033ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b10      	cmp	r3, #16
 8003372:	d11b      	bne.n	80033ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0210 	mvn.w	r2, #16
 800337c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2208      	movs	r2, #8
 8003382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9f9 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f9eb 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f9fc 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d10e      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0201 	mvn.w	r2, #1
 80033d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd f906 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d10e      	bne.n	8003404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b80      	cmp	r3, #128	; 0x80
 80033f2:	d107      	bne.n	8003404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fdca 	bl	8003f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d10e      	bne.n	8003430 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341c:	2b40      	cmp	r3, #64	; 0x40
 800341e:	d107      	bne.n	8003430 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f9c1 	bl	80037b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b20      	cmp	r3, #32
 800343c:	d10e      	bne.n	800345c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b20      	cmp	r3, #32
 800344a:	d107      	bne.n	800345c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0220 	mvn.w	r2, #32
 8003454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fd94 	bl	8003f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800347e:	2302      	movs	r3, #2
 8003480:	e0ae      	b.n	80035e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	f200 809f 	bhi.w	80035d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003492:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	080034cd 	.word	0x080034cd
 800349c:	080035d1 	.word	0x080035d1
 80034a0:	080035d1 	.word	0x080035d1
 80034a4:	080035d1 	.word	0x080035d1
 80034a8:	0800350d 	.word	0x0800350d
 80034ac:	080035d1 	.word	0x080035d1
 80034b0:	080035d1 	.word	0x080035d1
 80034b4:	080035d1 	.word	0x080035d1
 80034b8:	0800354f 	.word	0x0800354f
 80034bc:	080035d1 	.word	0x080035d1
 80034c0:	080035d1 	.word	0x080035d1
 80034c4:	080035d1 	.word	0x080035d1
 80034c8:	0800358f 	.word	0x0800358f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fa18 	bl	8003908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0208 	orr.w	r2, r2, #8
 80034e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0204 	bic.w	r2, r2, #4
 80034f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6999      	ldr	r1, [r3, #24]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	619a      	str	r2, [r3, #24]
      break;
 800350a:	e064      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fa68 	bl	80039e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6999      	ldr	r1, [r3, #24]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	021a      	lsls	r2, r3, #8
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	619a      	str	r2, [r3, #24]
      break;
 800354c:	e043      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fabd 	bl	8003ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0208 	orr.w	r2, r2, #8
 8003568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0204 	bic.w	r2, r2, #4
 8003578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69d9      	ldr	r1, [r3, #28]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	61da      	str	r2, [r3, #28]
      break;
 800358c:	e023      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fb11 	bl	8003bbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69d9      	ldr	r1, [r3, #28]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	021a      	lsls	r2, r3, #8
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	61da      	str	r2, [r3, #28]
      break;
 80035ce:	e002      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	75fb      	strb	r3, [r7, #23]
      break;
 80035d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035de:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_TIM_ConfigClockSource+0x1c>
 8003600:	2302      	movs	r3, #2
 8003602:	e0b4      	b.n	800376e <HAL_TIM_ConfigClockSource+0x186>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800362a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363c:	d03e      	beq.n	80036bc <HAL_TIM_ConfigClockSource+0xd4>
 800363e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003642:	f200 8087 	bhi.w	8003754 <HAL_TIM_ConfigClockSource+0x16c>
 8003646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364a:	f000 8086 	beq.w	800375a <HAL_TIM_ConfigClockSource+0x172>
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003652:	d87f      	bhi.n	8003754 <HAL_TIM_ConfigClockSource+0x16c>
 8003654:	2b70      	cmp	r3, #112	; 0x70
 8003656:	d01a      	beq.n	800368e <HAL_TIM_ConfigClockSource+0xa6>
 8003658:	2b70      	cmp	r3, #112	; 0x70
 800365a:	d87b      	bhi.n	8003754 <HAL_TIM_ConfigClockSource+0x16c>
 800365c:	2b60      	cmp	r3, #96	; 0x60
 800365e:	d050      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x11a>
 8003660:	2b60      	cmp	r3, #96	; 0x60
 8003662:	d877      	bhi.n	8003754 <HAL_TIM_ConfigClockSource+0x16c>
 8003664:	2b50      	cmp	r3, #80	; 0x50
 8003666:	d03c      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003668:	2b50      	cmp	r3, #80	; 0x50
 800366a:	d873      	bhi.n	8003754 <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	d058      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0x13a>
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d86f      	bhi.n	8003754 <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b30      	cmp	r3, #48	; 0x30
 8003676:	d064      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x15a>
 8003678:	2b30      	cmp	r3, #48	; 0x30
 800367a:	d86b      	bhi.n	8003754 <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b20      	cmp	r3, #32
 800367e:	d060      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x15a>
 8003680:	2b20      	cmp	r3, #32
 8003682:	d867      	bhi.n	8003754 <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d05c      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x15a>
 8003688:	2b10      	cmp	r3, #16
 800368a:	d05a      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x15a>
 800368c:	e062      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6899      	ldr	r1, [r3, #8]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f000 fb5d 	bl	8003d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	609a      	str	r2, [r3, #8]
      break;
 80036ba:	e04f      	b.n	800375c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	6899      	ldr	r1, [r3, #8]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f000 fb46 	bl	8003d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036de:	609a      	str	r2, [r3, #8]
      break;
 80036e0:	e03c      	b.n	800375c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f000 faba 	bl	8003c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2150      	movs	r1, #80	; 0x50
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fb13 	bl	8003d26 <TIM_ITRx_SetConfig>
      break;
 8003700:	e02c      	b.n	800375c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	461a      	mov	r2, r3
 8003710:	f000 fad9 	bl	8003cc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2160      	movs	r1, #96	; 0x60
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fb03 	bl	8003d26 <TIM_ITRx_SetConfig>
      break;
 8003720:	e01c      	b.n	800375c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	461a      	mov	r2, r3
 8003730:	f000 fa9a 	bl	8003c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2140      	movs	r1, #64	; 0x40
 800373a:	4618      	mov	r0, r3
 800373c:	f000 faf3 	bl	8003d26 <TIM_ITRx_SetConfig>
      break;
 8003740:	e00c      	b.n	800375c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4619      	mov	r1, r3
 800374c:	4610      	mov	r0, r2
 800374e:	f000 faea 	bl	8003d26 <TIM_ITRx_SetConfig>
      break;
 8003752:	e003      	b.n	800375c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      break;
 8003758:	e000      	b.n	800375c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800375a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800376c:	7bfb      	ldrb	r3, [r7, #15]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a40      	ldr	r2, [pc, #256]	; (80038dc <TIM_Base_SetConfig+0x114>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d013      	beq.n	8003808 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e6:	d00f      	beq.n	8003808 <TIM_Base_SetConfig+0x40>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a3d      	ldr	r2, [pc, #244]	; (80038e0 <TIM_Base_SetConfig+0x118>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00b      	beq.n	8003808 <TIM_Base_SetConfig+0x40>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a3c      	ldr	r2, [pc, #240]	; (80038e4 <TIM_Base_SetConfig+0x11c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a3b      	ldr	r2, [pc, #236]	; (80038e8 <TIM_Base_SetConfig+0x120>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <TIM_Base_SetConfig+0x40>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a3a      	ldr	r2, [pc, #232]	; (80038ec <TIM_Base_SetConfig+0x124>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d108      	bne.n	800381a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <TIM_Base_SetConfig+0x114>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d02b      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003828:	d027      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a2c      	ldr	r2, [pc, #176]	; (80038e0 <TIM_Base_SetConfig+0x118>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d023      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a2b      	ldr	r2, [pc, #172]	; (80038e4 <TIM_Base_SetConfig+0x11c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01f      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2a      	ldr	r2, [pc, #168]	; (80038e8 <TIM_Base_SetConfig+0x120>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01b      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a29      	ldr	r2, [pc, #164]	; (80038ec <TIM_Base_SetConfig+0x124>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d017      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <TIM_Base_SetConfig+0x128>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a27      	ldr	r2, [pc, #156]	; (80038f4 <TIM_Base_SetConfig+0x12c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00f      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a26      	ldr	r2, [pc, #152]	; (80038f8 <TIM_Base_SetConfig+0x130>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00b      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a25      	ldr	r2, [pc, #148]	; (80038fc <TIM_Base_SetConfig+0x134>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a24      	ldr	r2, [pc, #144]	; (8003900 <TIM_Base_SetConfig+0x138>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d003      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a23      	ldr	r2, [pc, #140]	; (8003904 <TIM_Base_SetConfig+0x13c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d108      	bne.n	800388c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <TIM_Base_SetConfig+0x114>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0xf8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <TIM_Base_SetConfig+0x124>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d103      	bne.n	80038c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	615a      	str	r2, [r3, #20]
}
 80038ce:	bf00      	nop
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800
 80038e8:	40000c00 	.word	0x40000c00
 80038ec:	40010400 	.word	0x40010400
 80038f0:	40014000 	.word	0x40014000
 80038f4:	40014400 	.word	0x40014400
 80038f8:	40014800 	.word	0x40014800
 80038fc:	40001800 	.word	0x40001800
 8003900:	40001c00 	.word	0x40001c00
 8003904:	40002000 	.word	0x40002000

08003908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f023 0201 	bic.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0303 	bic.w	r3, r3, #3
 800393e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 0302 	bic.w	r3, r3, #2
 8003950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <TIM_OC1_SetConfig+0xd8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_OC1_SetConfig+0x64>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a1f      	ldr	r2, [pc, #124]	; (80039e4 <TIM_OC1_SetConfig+0xdc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d10c      	bne.n	8003986 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f023 0308 	bic.w	r3, r3, #8
 8003972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f023 0304 	bic.w	r3, r3, #4
 8003984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <TIM_OC1_SetConfig+0xd8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d003      	beq.n	8003996 <TIM_OC1_SetConfig+0x8e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <TIM_OC1_SetConfig+0xdc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d111      	bne.n	80039ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800399c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	621a      	str	r2, [r3, #32]
}
 80039d4:	bf00      	nop
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	40010000 	.word	0x40010000
 80039e4:	40010400 	.word	0x40010400

080039e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f023 0210 	bic.w	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0320 	bic.w	r3, r3, #32
 8003a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a22      	ldr	r2, [pc, #136]	; (8003acc <TIM_OC2_SetConfig+0xe4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_OC2_SetConfig+0x68>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <TIM_OC2_SetConfig+0xe8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d10d      	bne.n	8003a6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a17      	ldr	r2, [pc, #92]	; (8003acc <TIM_OC2_SetConfig+0xe4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_OC2_SetConfig+0x94>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <TIM_OC2_SetConfig+0xe8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d113      	bne.n	8003aa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <TIM_OC3_SetConfig+0xe0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_OC3_SetConfig+0x66>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a20      	ldr	r2, [pc, #128]	; (8003bb8 <TIM_OC3_SetConfig+0xe4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10d      	bne.n	8003b56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <TIM_OC3_SetConfig+0xe0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d003      	beq.n	8003b66 <TIM_OC3_SetConfig+0x92>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <TIM_OC3_SetConfig+0xe4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d113      	bne.n	8003b8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	621a      	str	r2, [r3, #32]
}
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40010400 	.word	0x40010400

08003bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	031b      	lsls	r3, r3, #12
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <TIM_OC4_SetConfig+0xa4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_OC4_SetConfig+0x68>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a11      	ldr	r2, [pc, #68]	; (8003c64 <TIM_OC4_SetConfig+0xa8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d109      	bne.n	8003c38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	019b      	lsls	r3, r3, #6
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40010400 	.word	0x40010400

08003c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f023 0201 	bic.w	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f023 030a 	bic.w	r3, r3, #10
 8003ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b087      	sub	sp, #28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f023 0210 	bic.w	r2, r3, #16
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	031b      	lsls	r3, r3, #12
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f043 0307 	orr.w	r3, r3, #7
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	609a      	str	r2, [r3, #8]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	609a      	str	r2, [r3, #8]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	2201      	movs	r2, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1a      	ldr	r2, [r3, #32]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a1a      	ldr	r2, [r3, #32]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	621a      	str	r2, [r3, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e05a      	b.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a21      	ldr	r2, [pc, #132]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d022      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4c:	d01d      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d018      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a15      	ldr	r2, [pc, #84]	; (8003edc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d10c      	bne.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	40000c00 	.word	0x40000c00
 8003ed4:	40010400 	.word	0x40010400
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40001800 	.word	0x40001800

08003ee0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e03d      	b.n	8003f78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e03f      	b.n	800403e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd fc22 	bl	800181c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2224      	movs	r2, #36	; 0x24
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fddb 	bl	8004bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b08a      	sub	sp, #40	; 0x28
 800404a:	af02      	add	r7, sp, #8
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	4613      	mov	r3, r2
 8004054:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b20      	cmp	r3, #32
 8004064:	d17c      	bne.n	8004160 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_UART_Transmit+0x2c>
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e075      	b.n	8004162 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_UART_Transmit+0x3e>
 8004080:	2302      	movs	r3, #2
 8004082:	e06e      	b.n	8004162 <HAL_UART_Transmit+0x11c>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2221      	movs	r2, #33	; 0x21
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800409a:	f7fd fd63 	bl	8001b64 <HAL_GetTick>
 800409e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	88fa      	ldrh	r2, [r7, #6]
 80040a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	88fa      	ldrh	r2, [r7, #6]
 80040aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b4:	d108      	bne.n	80040c8 <HAL_UART_Transmit+0x82>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d104      	bne.n	80040c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e003      	b.n	80040d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040d8:	e02a      	b.n	8004130 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2180      	movs	r1, #128	; 0x80
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fb1f 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e036      	b.n	8004162 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	3302      	adds	r3, #2
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	e007      	b.n	8004122 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3301      	adds	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1cf      	bne.n	80040da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	2140      	movs	r1, #64	; 0x40
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 faef 	bl	8004728 <UART_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e006      	b.n	8004162 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	e000      	b.n	8004162 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004160:	2302      	movs	r3, #2
  }
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	4613      	mov	r3, r2
 8004176:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b20      	cmp	r3, #32
 8004182:	d11d      	bne.n	80041c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_UART_Receive_IT+0x26>
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e016      	b.n	80041c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_UART_Receive_IT+0x38>
 800419e:	2302      	movs	r3, #2
 80041a0:	e00f      	b.n	80041c2 <HAL_UART_Receive_IT+0x58>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	461a      	mov	r2, r3
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fb24 	bl	8004804 <UART_Start_Receive_IT>
 80041bc:	4603      	mov	r3, r0
 80041be:	e000      	b.n	80041c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
  }
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b0ba      	sub	sp, #232	; 0xe8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800420a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_UART_IRQHandler+0x66>
 800421e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fc03 	bl	8004a36 <UART_Receive_IT>
      return;
 8004230:	e256      	b.n	80046e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 80de 	beq.w	80043f8 <HAL_UART_IRQHandler+0x22c>
 800423c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80d1 	beq.w	80043f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HAL_UART_IRQHandler+0xae>
 8004262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f043 0201 	orr.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800427a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_UART_IRQHandler+0xd2>
 8004286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f043 0202 	orr.w	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800429e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00b      	beq.n	80042c2 <HAL_UART_IRQHandler+0xf6>
 80042aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f043 0204 	orr.w	r2, r3, #4
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d011      	beq.n	80042f2 <HAL_UART_IRQHandler+0x126>
 80042ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d105      	bne.n	80042e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f043 0208 	orr.w	r2, r3, #8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 81ed 	beq.w	80046d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_UART_IRQHandler+0x14e>
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fb8e 	bl	8004a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	bf0c      	ite	eq
 8004328:	2301      	moveq	r3, #1
 800432a:	2300      	movne	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <HAL_UART_IRQHandler+0x17a>
 800433e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d04f      	beq.n	80043e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fa96 	bl	8004878 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d141      	bne.n	80043de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3314      	adds	r3, #20
 8004382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004386:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800438a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800439e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1d9      	bne.n	800435a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d013      	beq.n	80043d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	4a7d      	ldr	r2, [pc, #500]	; (80045a8 <HAL_UART_IRQHandler+0x3dc>)
 80043b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd fd5f 	bl	8001e7e <HAL_DMA_Abort_IT>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d016      	beq.n	80043f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043d0:	4610      	mov	r0, r2
 80043d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	e00e      	b.n	80043f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f990 	bl	80046fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	e00a      	b.n	80043f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f98c 	bl	80046fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	e006      	b.n	80043f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f988 	bl	80046fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043f2:	e170      	b.n	80046d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	bf00      	nop
    return;
 80043f6:	e16e      	b.n	80046d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	f040 814a 	bne.w	8004696 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8143 	beq.w	8004696 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 813c 	beq.w	8004696 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	f040 80b4 	bne.w	80045ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004450:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8140 	beq.w	80046da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800445e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004462:	429a      	cmp	r2, r3
 8004464:	f080 8139 	bcs.w	80046da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800446e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447a:	f000 8088 	beq.w	800458e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004494:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800449c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80044aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1d9      	bne.n	800447e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3314      	adds	r3, #20
 80044d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3314      	adds	r3, #20
 80044ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e1      	bne.n	80044ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3314      	adds	r3, #20
 800450c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3314      	adds	r3, #20
 8004526:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800452a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800452c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004530:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e3      	bne.n	8004506 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800455c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455e:	f023 0310 	bic.w	r3, r3, #16
 8004562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	330c      	adds	r3, #12
 800456c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004570:	65ba      	str	r2, [r7, #88]	; 0x58
 8004572:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004576:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800457e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e3      	bne.n	800454c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	4618      	mov	r0, r3
 800458a:	f7fd fc08 	bl	8001d9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004596:	b29b      	uxth	r3, r3
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	b29b      	uxth	r3, r3
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f8b6 	bl	8004710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045a4:	e099      	b.n	80046da <HAL_UART_IRQHandler+0x50e>
 80045a6:	bf00      	nop
 80045a8:	0800493f 	.word	0x0800493f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 808b 	beq.w	80046de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80045c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 8086 	beq.w	80046de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045f6:	647a      	str	r2, [r7, #68]	; 0x44
 80045f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e3      	bne.n	80045d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3314      	adds	r3, #20
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	623b      	str	r3, [r7, #32]
   return(result);
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3314      	adds	r3, #20
 800462a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800462e:	633a      	str	r2, [r7, #48]	; 0x30
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e3      	bne.n	800460a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0310 	bic.w	r3, r3, #16
 8004666:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	330c      	adds	r3, #12
 8004670:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004674:	61fa      	str	r2, [r7, #28]
 8004676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	69b9      	ldr	r1, [r7, #24]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	617b      	str	r3, [r7, #20]
   return(result);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e3      	bne.n	8004650 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f83e 	bl	8004710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004694:	e023      	b.n	80046de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_UART_IRQHandler+0x4ea>
 80046a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f959 	bl	8004966 <UART_Transmit_IT>
    return;
 80046b4:	e014      	b.n	80046e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00e      	beq.n	80046e0 <HAL_UART_IRQHandler+0x514>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d008      	beq.n	80046e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f999 	bl	8004a06 <UART_EndTransmit_IT>
    return;
 80046d4:	e004      	b.n	80046e0 <HAL_UART_IRQHandler+0x514>
    return;
 80046d6:	bf00      	nop
 80046d8:	e002      	b.n	80046e0 <HAL_UART_IRQHandler+0x514>
      return;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <HAL_UART_IRQHandler+0x514>
      return;
 80046de:	bf00      	nop
  }
}
 80046e0:	37e8      	adds	r7, #232	; 0xe8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop

080046e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b090      	sub	sp, #64	; 0x40
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004738:	e050      	b.n	80047dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d04c      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <UART_WaitOnFlagUntilTimeout+0x30>
 8004748:	f7fd fa0c 	bl	8001b64 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004754:	429a      	cmp	r2, r3
 8004756:	d241      	bcs.n	80047dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	330c      	adds	r3, #12
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004778:	637a      	str	r2, [r7, #52]	; 0x34
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800477e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e5      	bne.n	8004758 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3314      	adds	r3, #20
 8004792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	613b      	str	r3, [r7, #16]
   return(result);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3314      	adds	r3, #20
 80047aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ac:	623a      	str	r2, [r7, #32]
 80047ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	69f9      	ldr	r1, [r7, #28]
 80047b2:	6a3a      	ldr	r2, [r7, #32]
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e5      	bne.n	800478c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e00f      	b.n	80047fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d09f      	beq.n	800473a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3740      	adds	r7, #64	; 0x40
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	88fa      	ldrh	r2, [r7, #6]
 800481c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2222      	movs	r2, #34	; 0x22
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004848:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0201 	orr.w	r2, r2, #1
 8004858:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0220 	orr.w	r2, r2, #32
 8004868:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004878:	b480      	push	{r7}
 800487a:	b095      	sub	sp, #84	; 0x54
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048a0:	643a      	str	r2, [r7, #64]	; 0x40
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e5      	bne.n	8004880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3314      	adds	r3, #20
 80048ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3314      	adds	r3, #20
 80048d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d119      	bne.n	8004924 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f023 0310 	bic.w	r3, r3, #16
 8004906:	647b      	str	r3, [r7, #68]	; 0x44
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004910:	61ba      	str	r2, [r7, #24]
 8004912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6979      	ldr	r1, [r7, #20]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	613b      	str	r3, [r7, #16]
   return(result);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e5      	bne.n	80048f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004932:	bf00      	nop
 8004934:	3754      	adds	r7, #84	; 0x54
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff fecf 	bl	80046fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800495e:	bf00      	nop
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b21      	cmp	r3, #33	; 0x21
 8004978:	d13e      	bne.n	80049f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004982:	d114      	bne.n	80049ae <UART_Transmit_IT+0x48>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d110      	bne.n	80049ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	1c9a      	adds	r2, r3, #2
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	621a      	str	r2, [r3, #32]
 80049ac:	e008      	b.n	80049c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	1c59      	adds	r1, r3, #1
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6211      	str	r1, [r2, #32]
 80049b8:	781a      	ldrb	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4619      	mov	r1, r3
 80049ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10f      	bne.n	80049f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e000      	b.n	80049fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
  }
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff fe5e 	bl	80046e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b08c      	sub	sp, #48	; 0x30
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b22      	cmp	r3, #34	; 0x22
 8004a48:	f040 80ab 	bne.w	8004ba2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a54:	d117      	bne.n	8004a86 <UART_Receive_IT+0x50>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d113      	bne.n	8004a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	1c9a      	adds	r2, r3, #2
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28
 8004a84:	e026      	b.n	8004ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a98:	d007      	beq.n	8004aaa <UART_Receive_IT+0x74>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10a      	bne.n	8004ab8 <UART_Receive_IT+0x82>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	e008      	b.n	8004aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d15a      	bne.n	8004b9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0220 	bic.w	r2, r2, #32
 8004af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d135      	bne.n	8004b94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f023 0310 	bic.w	r3, r3, #16
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	623a      	str	r2, [r7, #32]
 8004b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	69f9      	ldr	r1, [r7, #28]
 8004b54:	6a3a      	ldr	r2, [r7, #32]
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e5      	bne.n	8004b2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d10a      	bne.n	8004b86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff fdbf 	bl	8004710 <HAL_UARTEx_RxEventCallback>
 8004b92:	e002      	b.n	8004b9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fb fd07 	bl	80005a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e002      	b.n	8004ba4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3730      	adds	r7, #48	; 0x30
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb0:	b09f      	sub	sp, #124	; 0x7c
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc2:	68d9      	ldr	r1, [r3, #12]
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	ea40 0301 	orr.w	r3, r0, r1
 8004bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bf0:	f021 010c 	bic.w	r1, r1, #12
 8004bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0a:	6999      	ldr	r1, [r3, #24]
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	ea40 0301 	orr.w	r3, r0, r1
 8004c14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4bc5      	ldr	r3, [pc, #788]	; (8004f30 <UART_SetConfig+0x384>)
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d004      	beq.n	8004c2a <UART_SetConfig+0x7e>
 8004c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4bc3      	ldr	r3, [pc, #780]	; (8004f34 <UART_SetConfig+0x388>)
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d103      	bne.n	8004c32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c2a:	f7fd fc4f 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8004c2e:	6778      	str	r0, [r7, #116]	; 0x74
 8004c30:	e002      	b.n	8004c38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c32:	f7fd fc37 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 8004c36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c40:	f040 80b6 	bne.w	8004db0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c46:	461c      	mov	r4, r3
 8004c48:	f04f 0500 	mov.w	r5, #0
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	462b      	mov	r3, r5
 8004c50:	1891      	adds	r1, r2, r2
 8004c52:	6439      	str	r1, [r7, #64]	; 0x40
 8004c54:	415b      	adcs	r3, r3
 8004c56:	647b      	str	r3, [r7, #68]	; 0x44
 8004c58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c5c:	1912      	adds	r2, r2, r4
 8004c5e:	eb45 0303 	adc.w	r3, r5, r3
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f04f 0100 	mov.w	r1, #0
 8004c6a:	00d9      	lsls	r1, r3, #3
 8004c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c70:	00d0      	lsls	r0, r2, #3
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	1911      	adds	r1, r2, r4
 8004c78:	6639      	str	r1, [r7, #96]	; 0x60
 8004c7a:	416b      	adcs	r3, r5
 8004c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	1891      	adds	r1, r2, r2
 8004c8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c8c:	415b      	adcs	r3, r3
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c98:	f7fb fb0a 	bl	80002b0 <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4ba5      	ldr	r3, [pc, #660]	; (8004f38 <UART_SetConfig+0x38c>)
 8004ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	011e      	lsls	r6, r3, #4
 8004caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cac:	461c      	mov	r4, r3
 8004cae:	f04f 0500 	mov.w	r5, #0
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	1891      	adds	r1, r2, r2
 8004cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8004cba:	415b      	adcs	r3, r3
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cc2:	1912      	adds	r2, r2, r4
 8004cc4:	eb45 0303 	adc.w	r3, r5, r3
 8004cc8:	f04f 0000 	mov.w	r0, #0
 8004ccc:	f04f 0100 	mov.w	r1, #0
 8004cd0:	00d9      	lsls	r1, r3, #3
 8004cd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cd6:	00d0      	lsls	r0, r2, #3
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	1911      	adds	r1, r2, r4
 8004cde:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ce0:	416b      	adcs	r3, r5
 8004ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	1891      	adds	r1, r2, r2
 8004cf0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cf2:	415b      	adcs	r3, r3
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004cfe:	f7fb fad7 	bl	80002b0 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4b8c      	ldr	r3, [pc, #560]	; (8004f38 <UART_SetConfig+0x38c>)
 8004d08:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	2164      	movs	r1, #100	; 0x64
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	3332      	adds	r3, #50	; 0x32
 8004d1a:	4a87      	ldr	r2, [pc, #540]	; (8004f38 <UART_SetConfig+0x38c>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d28:	441e      	add	r6, r3
 8004d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	1894      	adds	r4, r2, r2
 8004d38:	623c      	str	r4, [r7, #32]
 8004d3a:	415b      	adcs	r3, r3
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d42:	1812      	adds	r2, r2, r0
 8004d44:	eb41 0303 	adc.w	r3, r1, r3
 8004d48:	f04f 0400 	mov.w	r4, #0
 8004d4c:	f04f 0500 	mov.w	r5, #0
 8004d50:	00dd      	lsls	r5, r3, #3
 8004d52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d56:	00d4      	lsls	r4, r2, #3
 8004d58:	4622      	mov	r2, r4
 8004d5a:	462b      	mov	r3, r5
 8004d5c:	1814      	adds	r4, r2, r0
 8004d5e:	653c      	str	r4, [r7, #80]	; 0x50
 8004d60:	414b      	adcs	r3, r1
 8004d62:	657b      	str	r3, [r7, #84]	; 0x54
 8004d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	1891      	adds	r1, r2, r2
 8004d70:	61b9      	str	r1, [r7, #24]
 8004d72:	415b      	adcs	r3, r3
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d7e:	f7fb fa97 	bl	80002b0 <__aeabi_uldivmod>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4b6c      	ldr	r3, [pc, #432]	; (8004f38 <UART_SetConfig+0x38c>)
 8004d88:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	2164      	movs	r1, #100	; 0x64
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	3332      	adds	r3, #50	; 0x32
 8004d9a:	4a67      	ldr	r2, [pc, #412]	; (8004f38 <UART_SetConfig+0x38c>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	f003 0207 	and.w	r2, r3, #7
 8004da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4432      	add	r2, r6
 8004dac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dae:	e0b9      	b.n	8004f24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db2:	461c      	mov	r4, r3
 8004db4:	f04f 0500 	mov.w	r5, #0
 8004db8:	4622      	mov	r2, r4
 8004dba:	462b      	mov	r3, r5
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	6139      	str	r1, [r7, #16]
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dc8:	1912      	adds	r2, r2, r4
 8004dca:	eb45 0303 	adc.w	r3, r5, r3
 8004dce:	f04f 0000 	mov.w	r0, #0
 8004dd2:	f04f 0100 	mov.w	r1, #0
 8004dd6:	00d9      	lsls	r1, r3, #3
 8004dd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ddc:	00d0      	lsls	r0, r2, #3
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	eb12 0804 	adds.w	r8, r2, r4
 8004de6:	eb43 0905 	adc.w	r9, r3, r5
 8004dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	008b      	lsls	r3, r1, #2
 8004dfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e02:	0082      	lsls	r2, r0, #2
 8004e04:	4640      	mov	r0, r8
 8004e06:	4649      	mov	r1, r9
 8004e08:	f7fb fa52 	bl	80002b0 <__aeabi_uldivmod>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4b49      	ldr	r3, [pc, #292]	; (8004f38 <UART_SetConfig+0x38c>)
 8004e12:	fba3 2302 	umull	r2, r3, r3, r2
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	011e      	lsls	r6, r3, #4
 8004e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f04f 0100 	mov.w	r1, #0
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	1894      	adds	r4, r2, r2
 8004e28:	60bc      	str	r4, [r7, #8]
 8004e2a:	415b      	adcs	r3, r3
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e32:	1812      	adds	r2, r2, r0
 8004e34:	eb41 0303 	adc.w	r3, r1, r3
 8004e38:	f04f 0400 	mov.w	r4, #0
 8004e3c:	f04f 0500 	mov.w	r5, #0
 8004e40:	00dd      	lsls	r5, r3, #3
 8004e42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e46:	00d4      	lsls	r4, r2, #3
 8004e48:	4622      	mov	r2, r4
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	1814      	adds	r4, r2, r0
 8004e4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e50:	414b      	adcs	r3, r1
 8004e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f04f 0100 	mov.w	r1, #0
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	008b      	lsls	r3, r1, #2
 8004e68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e6c:	0082      	lsls	r2, r0, #2
 8004e6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e72:	f7fb fa1d 	bl	80002b0 <__aeabi_uldivmod>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4b2f      	ldr	r3, [pc, #188]	; (8004f38 <UART_SetConfig+0x38c>)
 8004e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	2164      	movs	r1, #100	; 0x64
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	3332      	adds	r3, #50	; 0x32
 8004e8e:	4a2a      	ldr	r2, [pc, #168]	; (8004f38 <UART_SetConfig+0x38c>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e9a:	441e      	add	r6, r3
 8004e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	1894      	adds	r4, r2, r2
 8004eaa:	603c      	str	r4, [r7, #0]
 8004eac:	415b      	adcs	r3, r3
 8004eae:	607b      	str	r3, [r7, #4]
 8004eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb4:	1812      	adds	r2, r2, r0
 8004eb6:	eb41 0303 	adc.w	r3, r1, r3
 8004eba:	f04f 0400 	mov.w	r4, #0
 8004ebe:	f04f 0500 	mov.w	r5, #0
 8004ec2:	00dd      	lsls	r5, r3, #3
 8004ec4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ec8:	00d4      	lsls	r4, r2, #3
 8004eca:	4622      	mov	r2, r4
 8004ecc:	462b      	mov	r3, r5
 8004ece:	eb12 0a00 	adds.w	sl, r2, r0
 8004ed2:	eb43 0b01 	adc.w	fp, r3, r1
 8004ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f04f 0100 	mov.w	r1, #0
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	008b      	lsls	r3, r1, #2
 8004eea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004eee:	0082      	lsls	r2, r0, #2
 8004ef0:	4650      	mov	r0, sl
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	f7fb f9dc 	bl	80002b0 <__aeabi_uldivmod>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <UART_SetConfig+0x38c>)
 8004efe:	fba3 1302 	umull	r1, r3, r3, r2
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	2164      	movs	r1, #100	; 0x64
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	3332      	adds	r3, #50	; 0x32
 8004f10:	4a09      	ldr	r2, [pc, #36]	; (8004f38 <UART_SetConfig+0x38c>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	f003 020f 	and.w	r2, r3, #15
 8004f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4432      	add	r2, r6
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	377c      	adds	r7, #124	; 0x7c
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	bf00      	nop
 8004f30:	40011000 	.word	0x40011000
 8004f34:	40011400 	.word	0x40011400
 8004f38:	51eb851f 	.word	0x51eb851f

08004f3c <__errno>:
 8004f3c:	4b01      	ldr	r3, [pc, #4]	; (8004f44 <__errno+0x8>)
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20000014 	.word	0x20000014

08004f48 <__libc_init_array>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4d0d      	ldr	r5, [pc, #52]	; (8004f80 <__libc_init_array+0x38>)
 8004f4c:	4c0d      	ldr	r4, [pc, #52]	; (8004f84 <__libc_init_array+0x3c>)
 8004f4e:	1b64      	subs	r4, r4, r5
 8004f50:	10a4      	asrs	r4, r4, #2
 8004f52:	2600      	movs	r6, #0
 8004f54:	42a6      	cmp	r6, r4
 8004f56:	d109      	bne.n	8004f6c <__libc_init_array+0x24>
 8004f58:	4d0b      	ldr	r5, [pc, #44]	; (8004f88 <__libc_init_array+0x40>)
 8004f5a:	4c0c      	ldr	r4, [pc, #48]	; (8004f8c <__libc_init_array+0x44>)
 8004f5c:	f000 fc4e 	bl	80057fc <_init>
 8004f60:	1b64      	subs	r4, r4, r5
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	2600      	movs	r6, #0
 8004f66:	42a6      	cmp	r6, r4
 8004f68:	d105      	bne.n	8004f76 <__libc_init_array+0x2e>
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f70:	4798      	blx	r3
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7ee      	b.n	8004f54 <__libc_init_array+0xc>
 8004f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7a:	4798      	blx	r3
 8004f7c:	3601      	adds	r6, #1
 8004f7e:	e7f2      	b.n	8004f66 <__libc_init_array+0x1e>
 8004f80:	0800586c 	.word	0x0800586c
 8004f84:	0800586c 	.word	0x0800586c
 8004f88:	0800586c 	.word	0x0800586c
 8004f8c:	08005870 	.word	0x08005870

08004f90 <memset>:
 8004f90:	4402      	add	r2, r0
 8004f92:	4603      	mov	r3, r0
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d100      	bne.n	8004f9a <memset+0xa>
 8004f98:	4770      	bx	lr
 8004f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9e:	e7f9      	b.n	8004f94 <memset+0x4>

08004fa0 <siprintf>:
 8004fa0:	b40e      	push	{r1, r2, r3}
 8004fa2:	b500      	push	{lr}
 8004fa4:	b09c      	sub	sp, #112	; 0x70
 8004fa6:	ab1d      	add	r3, sp, #116	; 0x74
 8004fa8:	9002      	str	r0, [sp, #8]
 8004faa:	9006      	str	r0, [sp, #24]
 8004fac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fb0:	4809      	ldr	r0, [pc, #36]	; (8004fd8 <siprintf+0x38>)
 8004fb2:	9107      	str	r1, [sp, #28]
 8004fb4:	9104      	str	r1, [sp, #16]
 8004fb6:	4909      	ldr	r1, [pc, #36]	; (8004fdc <siprintf+0x3c>)
 8004fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fbc:	9105      	str	r1, [sp, #20]
 8004fbe:	6800      	ldr	r0, [r0, #0]
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	a902      	add	r1, sp, #8
 8004fc4:	f000 f868 	bl	8005098 <_svfiprintf_r>
 8004fc8:	9b02      	ldr	r3, [sp, #8]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	b01c      	add	sp, #112	; 0x70
 8004fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fd4:	b003      	add	sp, #12
 8004fd6:	4770      	bx	lr
 8004fd8:	20000014 	.word	0x20000014
 8004fdc:	ffff0208 	.word	0xffff0208

08004fe0 <__ssputs_r>:
 8004fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe4:	688e      	ldr	r6, [r1, #8]
 8004fe6:	429e      	cmp	r6, r3
 8004fe8:	4682      	mov	sl, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	4690      	mov	r8, r2
 8004fee:	461f      	mov	r7, r3
 8004ff0:	d838      	bhi.n	8005064 <__ssputs_r+0x84>
 8004ff2:	898a      	ldrh	r2, [r1, #12]
 8004ff4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ff8:	d032      	beq.n	8005060 <__ssputs_r+0x80>
 8004ffa:	6825      	ldr	r5, [r4, #0]
 8004ffc:	6909      	ldr	r1, [r1, #16]
 8004ffe:	eba5 0901 	sub.w	r9, r5, r1
 8005002:	6965      	ldr	r5, [r4, #20]
 8005004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005008:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800500c:	3301      	adds	r3, #1
 800500e:	444b      	add	r3, r9
 8005010:	106d      	asrs	r5, r5, #1
 8005012:	429d      	cmp	r5, r3
 8005014:	bf38      	it	cc
 8005016:	461d      	movcc	r5, r3
 8005018:	0553      	lsls	r3, r2, #21
 800501a:	d531      	bpl.n	8005080 <__ssputs_r+0xa0>
 800501c:	4629      	mov	r1, r5
 800501e:	f000 fb47 	bl	80056b0 <_malloc_r>
 8005022:	4606      	mov	r6, r0
 8005024:	b950      	cbnz	r0, 800503c <__ssputs_r+0x5c>
 8005026:	230c      	movs	r3, #12
 8005028:	f8ca 3000 	str.w	r3, [sl]
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005032:	81a3      	strh	r3, [r4, #12]
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503c:	6921      	ldr	r1, [r4, #16]
 800503e:	464a      	mov	r2, r9
 8005040:	f000 fabe 	bl	80055c0 <memcpy>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800504a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504e:	81a3      	strh	r3, [r4, #12]
 8005050:	6126      	str	r6, [r4, #16]
 8005052:	6165      	str	r5, [r4, #20]
 8005054:	444e      	add	r6, r9
 8005056:	eba5 0509 	sub.w	r5, r5, r9
 800505a:	6026      	str	r6, [r4, #0]
 800505c:	60a5      	str	r5, [r4, #8]
 800505e:	463e      	mov	r6, r7
 8005060:	42be      	cmp	r6, r7
 8005062:	d900      	bls.n	8005066 <__ssputs_r+0x86>
 8005064:	463e      	mov	r6, r7
 8005066:	4632      	mov	r2, r6
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	4641      	mov	r1, r8
 800506c:	f000 fab6 	bl	80055dc <memmove>
 8005070:	68a3      	ldr	r3, [r4, #8]
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	1b9b      	subs	r3, r3, r6
 8005076:	4432      	add	r2, r6
 8005078:	60a3      	str	r3, [r4, #8]
 800507a:	6022      	str	r2, [r4, #0]
 800507c:	2000      	movs	r0, #0
 800507e:	e7db      	b.n	8005038 <__ssputs_r+0x58>
 8005080:	462a      	mov	r2, r5
 8005082:	f000 fb6f 	bl	8005764 <_realloc_r>
 8005086:	4606      	mov	r6, r0
 8005088:	2800      	cmp	r0, #0
 800508a:	d1e1      	bne.n	8005050 <__ssputs_r+0x70>
 800508c:	6921      	ldr	r1, [r4, #16]
 800508e:	4650      	mov	r0, sl
 8005090:	f000 fabe 	bl	8005610 <_free_r>
 8005094:	e7c7      	b.n	8005026 <__ssputs_r+0x46>
	...

08005098 <_svfiprintf_r>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	4698      	mov	r8, r3
 800509e:	898b      	ldrh	r3, [r1, #12]
 80050a0:	061b      	lsls	r3, r3, #24
 80050a2:	b09d      	sub	sp, #116	; 0x74
 80050a4:	4607      	mov	r7, r0
 80050a6:	460d      	mov	r5, r1
 80050a8:	4614      	mov	r4, r2
 80050aa:	d50e      	bpl.n	80050ca <_svfiprintf_r+0x32>
 80050ac:	690b      	ldr	r3, [r1, #16]
 80050ae:	b963      	cbnz	r3, 80050ca <_svfiprintf_r+0x32>
 80050b0:	2140      	movs	r1, #64	; 0x40
 80050b2:	f000 fafd 	bl	80056b0 <_malloc_r>
 80050b6:	6028      	str	r0, [r5, #0]
 80050b8:	6128      	str	r0, [r5, #16]
 80050ba:	b920      	cbnz	r0, 80050c6 <_svfiprintf_r+0x2e>
 80050bc:	230c      	movs	r3, #12
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	e0d1      	b.n	800526a <_svfiprintf_r+0x1d2>
 80050c6:	2340      	movs	r3, #64	; 0x40
 80050c8:	616b      	str	r3, [r5, #20]
 80050ca:	2300      	movs	r3, #0
 80050cc:	9309      	str	r3, [sp, #36]	; 0x24
 80050ce:	2320      	movs	r3, #32
 80050d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80050d8:	2330      	movs	r3, #48	; 0x30
 80050da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005284 <_svfiprintf_r+0x1ec>
 80050de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050e2:	f04f 0901 	mov.w	r9, #1
 80050e6:	4623      	mov	r3, r4
 80050e8:	469a      	mov	sl, r3
 80050ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ee:	b10a      	cbz	r2, 80050f4 <_svfiprintf_r+0x5c>
 80050f0:	2a25      	cmp	r2, #37	; 0x25
 80050f2:	d1f9      	bne.n	80050e8 <_svfiprintf_r+0x50>
 80050f4:	ebba 0b04 	subs.w	fp, sl, r4
 80050f8:	d00b      	beq.n	8005112 <_svfiprintf_r+0x7a>
 80050fa:	465b      	mov	r3, fp
 80050fc:	4622      	mov	r2, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	4638      	mov	r0, r7
 8005102:	f7ff ff6d 	bl	8004fe0 <__ssputs_r>
 8005106:	3001      	adds	r0, #1
 8005108:	f000 80aa 	beq.w	8005260 <_svfiprintf_r+0x1c8>
 800510c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800510e:	445a      	add	r2, fp
 8005110:	9209      	str	r2, [sp, #36]	; 0x24
 8005112:	f89a 3000 	ldrb.w	r3, [sl]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80a2 	beq.w	8005260 <_svfiprintf_r+0x1c8>
 800511c:	2300      	movs	r3, #0
 800511e:	f04f 32ff 	mov.w	r2, #4294967295
 8005122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005126:	f10a 0a01 	add.w	sl, sl, #1
 800512a:	9304      	str	r3, [sp, #16]
 800512c:	9307      	str	r3, [sp, #28]
 800512e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005132:	931a      	str	r3, [sp, #104]	; 0x68
 8005134:	4654      	mov	r4, sl
 8005136:	2205      	movs	r2, #5
 8005138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513c:	4851      	ldr	r0, [pc, #324]	; (8005284 <_svfiprintf_r+0x1ec>)
 800513e:	f7fb f867 	bl	8000210 <memchr>
 8005142:	9a04      	ldr	r2, [sp, #16]
 8005144:	b9d8      	cbnz	r0, 800517e <_svfiprintf_r+0xe6>
 8005146:	06d0      	lsls	r0, r2, #27
 8005148:	bf44      	itt	mi
 800514a:	2320      	movmi	r3, #32
 800514c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005150:	0711      	lsls	r1, r2, #28
 8005152:	bf44      	itt	mi
 8005154:	232b      	movmi	r3, #43	; 0x2b
 8005156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800515a:	f89a 3000 	ldrb.w	r3, [sl]
 800515e:	2b2a      	cmp	r3, #42	; 0x2a
 8005160:	d015      	beq.n	800518e <_svfiprintf_r+0xf6>
 8005162:	9a07      	ldr	r2, [sp, #28]
 8005164:	4654      	mov	r4, sl
 8005166:	2000      	movs	r0, #0
 8005168:	f04f 0c0a 	mov.w	ip, #10
 800516c:	4621      	mov	r1, r4
 800516e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005172:	3b30      	subs	r3, #48	; 0x30
 8005174:	2b09      	cmp	r3, #9
 8005176:	d94e      	bls.n	8005216 <_svfiprintf_r+0x17e>
 8005178:	b1b0      	cbz	r0, 80051a8 <_svfiprintf_r+0x110>
 800517a:	9207      	str	r2, [sp, #28]
 800517c:	e014      	b.n	80051a8 <_svfiprintf_r+0x110>
 800517e:	eba0 0308 	sub.w	r3, r0, r8
 8005182:	fa09 f303 	lsl.w	r3, r9, r3
 8005186:	4313      	orrs	r3, r2
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	46a2      	mov	sl, r4
 800518c:	e7d2      	b.n	8005134 <_svfiprintf_r+0x9c>
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	1d19      	adds	r1, r3, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	9103      	str	r1, [sp, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	bfbb      	ittet	lt
 800519a:	425b      	neglt	r3, r3
 800519c:	f042 0202 	orrlt.w	r2, r2, #2
 80051a0:	9307      	strge	r3, [sp, #28]
 80051a2:	9307      	strlt	r3, [sp, #28]
 80051a4:	bfb8      	it	lt
 80051a6:	9204      	strlt	r2, [sp, #16]
 80051a8:	7823      	ldrb	r3, [r4, #0]
 80051aa:	2b2e      	cmp	r3, #46	; 0x2e
 80051ac:	d10c      	bne.n	80051c8 <_svfiprintf_r+0x130>
 80051ae:	7863      	ldrb	r3, [r4, #1]
 80051b0:	2b2a      	cmp	r3, #42	; 0x2a
 80051b2:	d135      	bne.n	8005220 <_svfiprintf_r+0x188>
 80051b4:	9b03      	ldr	r3, [sp, #12]
 80051b6:	1d1a      	adds	r2, r3, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	9203      	str	r2, [sp, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bfb8      	it	lt
 80051c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80051c4:	3402      	adds	r4, #2
 80051c6:	9305      	str	r3, [sp, #20]
 80051c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005294 <_svfiprintf_r+0x1fc>
 80051cc:	7821      	ldrb	r1, [r4, #0]
 80051ce:	2203      	movs	r2, #3
 80051d0:	4650      	mov	r0, sl
 80051d2:	f7fb f81d 	bl	8000210 <memchr>
 80051d6:	b140      	cbz	r0, 80051ea <_svfiprintf_r+0x152>
 80051d8:	2340      	movs	r3, #64	; 0x40
 80051da:	eba0 000a 	sub.w	r0, r0, sl
 80051de:	fa03 f000 	lsl.w	r0, r3, r0
 80051e2:	9b04      	ldr	r3, [sp, #16]
 80051e4:	4303      	orrs	r3, r0
 80051e6:	3401      	adds	r4, #1
 80051e8:	9304      	str	r3, [sp, #16]
 80051ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ee:	4826      	ldr	r0, [pc, #152]	; (8005288 <_svfiprintf_r+0x1f0>)
 80051f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051f4:	2206      	movs	r2, #6
 80051f6:	f7fb f80b 	bl	8000210 <memchr>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d038      	beq.n	8005270 <_svfiprintf_r+0x1d8>
 80051fe:	4b23      	ldr	r3, [pc, #140]	; (800528c <_svfiprintf_r+0x1f4>)
 8005200:	bb1b      	cbnz	r3, 800524a <_svfiprintf_r+0x1b2>
 8005202:	9b03      	ldr	r3, [sp, #12]
 8005204:	3307      	adds	r3, #7
 8005206:	f023 0307 	bic.w	r3, r3, #7
 800520a:	3308      	adds	r3, #8
 800520c:	9303      	str	r3, [sp, #12]
 800520e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005210:	4433      	add	r3, r6
 8005212:	9309      	str	r3, [sp, #36]	; 0x24
 8005214:	e767      	b.n	80050e6 <_svfiprintf_r+0x4e>
 8005216:	fb0c 3202 	mla	r2, ip, r2, r3
 800521a:	460c      	mov	r4, r1
 800521c:	2001      	movs	r0, #1
 800521e:	e7a5      	b.n	800516c <_svfiprintf_r+0xd4>
 8005220:	2300      	movs	r3, #0
 8005222:	3401      	adds	r4, #1
 8005224:	9305      	str	r3, [sp, #20]
 8005226:	4619      	mov	r1, r3
 8005228:	f04f 0c0a 	mov.w	ip, #10
 800522c:	4620      	mov	r0, r4
 800522e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005232:	3a30      	subs	r2, #48	; 0x30
 8005234:	2a09      	cmp	r2, #9
 8005236:	d903      	bls.n	8005240 <_svfiprintf_r+0x1a8>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0c5      	beq.n	80051c8 <_svfiprintf_r+0x130>
 800523c:	9105      	str	r1, [sp, #20]
 800523e:	e7c3      	b.n	80051c8 <_svfiprintf_r+0x130>
 8005240:	fb0c 2101 	mla	r1, ip, r1, r2
 8005244:	4604      	mov	r4, r0
 8005246:	2301      	movs	r3, #1
 8005248:	e7f0      	b.n	800522c <_svfiprintf_r+0x194>
 800524a:	ab03      	add	r3, sp, #12
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	462a      	mov	r2, r5
 8005250:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <_svfiprintf_r+0x1f8>)
 8005252:	a904      	add	r1, sp, #16
 8005254:	4638      	mov	r0, r7
 8005256:	f3af 8000 	nop.w
 800525a:	1c42      	adds	r2, r0, #1
 800525c:	4606      	mov	r6, r0
 800525e:	d1d6      	bne.n	800520e <_svfiprintf_r+0x176>
 8005260:	89ab      	ldrh	r3, [r5, #12]
 8005262:	065b      	lsls	r3, r3, #25
 8005264:	f53f af2c 	bmi.w	80050c0 <_svfiprintf_r+0x28>
 8005268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800526a:	b01d      	add	sp, #116	; 0x74
 800526c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005270:	ab03      	add	r3, sp, #12
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	462a      	mov	r2, r5
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <_svfiprintf_r+0x1f8>)
 8005278:	a904      	add	r1, sp, #16
 800527a:	4638      	mov	r0, r7
 800527c:	f000 f87a 	bl	8005374 <_printf_i>
 8005280:	e7eb      	b.n	800525a <_svfiprintf_r+0x1c2>
 8005282:	bf00      	nop
 8005284:	08005830 	.word	0x08005830
 8005288:	0800583a 	.word	0x0800583a
 800528c:	00000000 	.word	0x00000000
 8005290:	08004fe1 	.word	0x08004fe1
 8005294:	08005836 	.word	0x08005836

08005298 <_printf_common>:
 8005298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800529c:	4616      	mov	r6, r2
 800529e:	4699      	mov	r9, r3
 80052a0:	688a      	ldr	r2, [r1, #8]
 80052a2:	690b      	ldr	r3, [r1, #16]
 80052a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a8:	4293      	cmp	r3, r2
 80052aa:	bfb8      	it	lt
 80052ac:	4613      	movlt	r3, r2
 80052ae:	6033      	str	r3, [r6, #0]
 80052b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052b4:	4607      	mov	r7, r0
 80052b6:	460c      	mov	r4, r1
 80052b8:	b10a      	cbz	r2, 80052be <_printf_common+0x26>
 80052ba:	3301      	adds	r3, #1
 80052bc:	6033      	str	r3, [r6, #0]
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	0699      	lsls	r1, r3, #26
 80052c2:	bf42      	ittt	mi
 80052c4:	6833      	ldrmi	r3, [r6, #0]
 80052c6:	3302      	addmi	r3, #2
 80052c8:	6033      	strmi	r3, [r6, #0]
 80052ca:	6825      	ldr	r5, [r4, #0]
 80052cc:	f015 0506 	ands.w	r5, r5, #6
 80052d0:	d106      	bne.n	80052e0 <_printf_common+0x48>
 80052d2:	f104 0a19 	add.w	sl, r4, #25
 80052d6:	68e3      	ldr	r3, [r4, #12]
 80052d8:	6832      	ldr	r2, [r6, #0]
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	42ab      	cmp	r3, r5
 80052de:	dc26      	bgt.n	800532e <_printf_common+0x96>
 80052e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052e4:	1e13      	subs	r3, r2, #0
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	bf18      	it	ne
 80052ea:	2301      	movne	r3, #1
 80052ec:	0692      	lsls	r2, r2, #26
 80052ee:	d42b      	bmi.n	8005348 <_printf_common+0xb0>
 80052f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052f4:	4649      	mov	r1, r9
 80052f6:	4638      	mov	r0, r7
 80052f8:	47c0      	blx	r8
 80052fa:	3001      	adds	r0, #1
 80052fc:	d01e      	beq.n	800533c <_printf_common+0xa4>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	68e5      	ldr	r5, [r4, #12]
 8005302:	6832      	ldr	r2, [r6, #0]
 8005304:	f003 0306 	and.w	r3, r3, #6
 8005308:	2b04      	cmp	r3, #4
 800530a:	bf08      	it	eq
 800530c:	1aad      	subeq	r5, r5, r2
 800530e:	68a3      	ldr	r3, [r4, #8]
 8005310:	6922      	ldr	r2, [r4, #16]
 8005312:	bf0c      	ite	eq
 8005314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005318:	2500      	movne	r5, #0
 800531a:	4293      	cmp	r3, r2
 800531c:	bfc4      	itt	gt
 800531e:	1a9b      	subgt	r3, r3, r2
 8005320:	18ed      	addgt	r5, r5, r3
 8005322:	2600      	movs	r6, #0
 8005324:	341a      	adds	r4, #26
 8005326:	42b5      	cmp	r5, r6
 8005328:	d11a      	bne.n	8005360 <_printf_common+0xc8>
 800532a:	2000      	movs	r0, #0
 800532c:	e008      	b.n	8005340 <_printf_common+0xa8>
 800532e:	2301      	movs	r3, #1
 8005330:	4652      	mov	r2, sl
 8005332:	4649      	mov	r1, r9
 8005334:	4638      	mov	r0, r7
 8005336:	47c0      	blx	r8
 8005338:	3001      	adds	r0, #1
 800533a:	d103      	bne.n	8005344 <_printf_common+0xac>
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005344:	3501      	adds	r5, #1
 8005346:	e7c6      	b.n	80052d6 <_printf_common+0x3e>
 8005348:	18e1      	adds	r1, r4, r3
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	2030      	movs	r0, #48	; 0x30
 800534e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005352:	4422      	add	r2, r4
 8005354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800535c:	3302      	adds	r3, #2
 800535e:	e7c7      	b.n	80052f0 <_printf_common+0x58>
 8005360:	2301      	movs	r3, #1
 8005362:	4622      	mov	r2, r4
 8005364:	4649      	mov	r1, r9
 8005366:	4638      	mov	r0, r7
 8005368:	47c0      	blx	r8
 800536a:	3001      	adds	r0, #1
 800536c:	d0e6      	beq.n	800533c <_printf_common+0xa4>
 800536e:	3601      	adds	r6, #1
 8005370:	e7d9      	b.n	8005326 <_printf_common+0x8e>
	...

08005374 <_printf_i>:
 8005374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005378:	460c      	mov	r4, r1
 800537a:	4691      	mov	r9, r2
 800537c:	7e27      	ldrb	r7, [r4, #24]
 800537e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005380:	2f78      	cmp	r7, #120	; 0x78
 8005382:	4680      	mov	r8, r0
 8005384:	469a      	mov	sl, r3
 8005386:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800538a:	d807      	bhi.n	800539c <_printf_i+0x28>
 800538c:	2f62      	cmp	r7, #98	; 0x62
 800538e:	d80a      	bhi.n	80053a6 <_printf_i+0x32>
 8005390:	2f00      	cmp	r7, #0
 8005392:	f000 80d8 	beq.w	8005546 <_printf_i+0x1d2>
 8005396:	2f58      	cmp	r7, #88	; 0x58
 8005398:	f000 80a3 	beq.w	80054e2 <_printf_i+0x16e>
 800539c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053a4:	e03a      	b.n	800541c <_printf_i+0xa8>
 80053a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053aa:	2b15      	cmp	r3, #21
 80053ac:	d8f6      	bhi.n	800539c <_printf_i+0x28>
 80053ae:	a001      	add	r0, pc, #4	; (adr r0, 80053b4 <_printf_i+0x40>)
 80053b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053b4:	0800540d 	.word	0x0800540d
 80053b8:	08005421 	.word	0x08005421
 80053bc:	0800539d 	.word	0x0800539d
 80053c0:	0800539d 	.word	0x0800539d
 80053c4:	0800539d 	.word	0x0800539d
 80053c8:	0800539d 	.word	0x0800539d
 80053cc:	08005421 	.word	0x08005421
 80053d0:	0800539d 	.word	0x0800539d
 80053d4:	0800539d 	.word	0x0800539d
 80053d8:	0800539d 	.word	0x0800539d
 80053dc:	0800539d 	.word	0x0800539d
 80053e0:	0800552d 	.word	0x0800552d
 80053e4:	08005451 	.word	0x08005451
 80053e8:	0800550f 	.word	0x0800550f
 80053ec:	0800539d 	.word	0x0800539d
 80053f0:	0800539d 	.word	0x0800539d
 80053f4:	0800554f 	.word	0x0800554f
 80053f8:	0800539d 	.word	0x0800539d
 80053fc:	08005451 	.word	0x08005451
 8005400:	0800539d 	.word	0x0800539d
 8005404:	0800539d 	.word	0x0800539d
 8005408:	08005517 	.word	0x08005517
 800540c:	680b      	ldr	r3, [r1, #0]
 800540e:	1d1a      	adds	r2, r3, #4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	600a      	str	r2, [r1, #0]
 8005414:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800541c:	2301      	movs	r3, #1
 800541e:	e0a3      	b.n	8005568 <_printf_i+0x1f4>
 8005420:	6825      	ldr	r5, [r4, #0]
 8005422:	6808      	ldr	r0, [r1, #0]
 8005424:	062e      	lsls	r6, r5, #24
 8005426:	f100 0304 	add.w	r3, r0, #4
 800542a:	d50a      	bpl.n	8005442 <_printf_i+0xce>
 800542c:	6805      	ldr	r5, [r0, #0]
 800542e:	600b      	str	r3, [r1, #0]
 8005430:	2d00      	cmp	r5, #0
 8005432:	da03      	bge.n	800543c <_printf_i+0xc8>
 8005434:	232d      	movs	r3, #45	; 0x2d
 8005436:	426d      	negs	r5, r5
 8005438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800543c:	485e      	ldr	r0, [pc, #376]	; (80055b8 <_printf_i+0x244>)
 800543e:	230a      	movs	r3, #10
 8005440:	e019      	b.n	8005476 <_printf_i+0x102>
 8005442:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005446:	6805      	ldr	r5, [r0, #0]
 8005448:	600b      	str	r3, [r1, #0]
 800544a:	bf18      	it	ne
 800544c:	b22d      	sxthne	r5, r5
 800544e:	e7ef      	b.n	8005430 <_printf_i+0xbc>
 8005450:	680b      	ldr	r3, [r1, #0]
 8005452:	6825      	ldr	r5, [r4, #0]
 8005454:	1d18      	adds	r0, r3, #4
 8005456:	6008      	str	r0, [r1, #0]
 8005458:	0628      	lsls	r0, r5, #24
 800545a:	d501      	bpl.n	8005460 <_printf_i+0xec>
 800545c:	681d      	ldr	r5, [r3, #0]
 800545e:	e002      	b.n	8005466 <_printf_i+0xf2>
 8005460:	0669      	lsls	r1, r5, #25
 8005462:	d5fb      	bpl.n	800545c <_printf_i+0xe8>
 8005464:	881d      	ldrh	r5, [r3, #0]
 8005466:	4854      	ldr	r0, [pc, #336]	; (80055b8 <_printf_i+0x244>)
 8005468:	2f6f      	cmp	r7, #111	; 0x6f
 800546a:	bf0c      	ite	eq
 800546c:	2308      	moveq	r3, #8
 800546e:	230a      	movne	r3, #10
 8005470:	2100      	movs	r1, #0
 8005472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005476:	6866      	ldr	r6, [r4, #4]
 8005478:	60a6      	str	r6, [r4, #8]
 800547a:	2e00      	cmp	r6, #0
 800547c:	bfa2      	ittt	ge
 800547e:	6821      	ldrge	r1, [r4, #0]
 8005480:	f021 0104 	bicge.w	r1, r1, #4
 8005484:	6021      	strge	r1, [r4, #0]
 8005486:	b90d      	cbnz	r5, 800548c <_printf_i+0x118>
 8005488:	2e00      	cmp	r6, #0
 800548a:	d04d      	beq.n	8005528 <_printf_i+0x1b4>
 800548c:	4616      	mov	r6, r2
 800548e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005492:	fb03 5711 	mls	r7, r3, r1, r5
 8005496:	5dc7      	ldrb	r7, [r0, r7]
 8005498:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800549c:	462f      	mov	r7, r5
 800549e:	42bb      	cmp	r3, r7
 80054a0:	460d      	mov	r5, r1
 80054a2:	d9f4      	bls.n	800548e <_printf_i+0x11a>
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d10b      	bne.n	80054c0 <_printf_i+0x14c>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	07df      	lsls	r7, r3, #31
 80054ac:	d508      	bpl.n	80054c0 <_printf_i+0x14c>
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	6861      	ldr	r1, [r4, #4]
 80054b2:	4299      	cmp	r1, r3
 80054b4:	bfde      	ittt	le
 80054b6:	2330      	movle	r3, #48	; 0x30
 80054b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054c0:	1b92      	subs	r2, r2, r6
 80054c2:	6122      	str	r2, [r4, #16]
 80054c4:	f8cd a000 	str.w	sl, [sp]
 80054c8:	464b      	mov	r3, r9
 80054ca:	aa03      	add	r2, sp, #12
 80054cc:	4621      	mov	r1, r4
 80054ce:	4640      	mov	r0, r8
 80054d0:	f7ff fee2 	bl	8005298 <_printf_common>
 80054d4:	3001      	adds	r0, #1
 80054d6:	d14c      	bne.n	8005572 <_printf_i+0x1fe>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	b004      	add	sp, #16
 80054de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e2:	4835      	ldr	r0, [pc, #212]	; (80055b8 <_printf_i+0x244>)
 80054e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	680e      	ldr	r6, [r1, #0]
 80054ec:	061f      	lsls	r7, r3, #24
 80054ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80054f2:	600e      	str	r6, [r1, #0]
 80054f4:	d514      	bpl.n	8005520 <_printf_i+0x1ac>
 80054f6:	07d9      	lsls	r1, r3, #31
 80054f8:	bf44      	itt	mi
 80054fa:	f043 0320 	orrmi.w	r3, r3, #32
 80054fe:	6023      	strmi	r3, [r4, #0]
 8005500:	b91d      	cbnz	r5, 800550a <_printf_i+0x196>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	f023 0320 	bic.w	r3, r3, #32
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	2310      	movs	r3, #16
 800550c:	e7b0      	b.n	8005470 <_printf_i+0xfc>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	f043 0320 	orr.w	r3, r3, #32
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	2378      	movs	r3, #120	; 0x78
 8005518:	4828      	ldr	r0, [pc, #160]	; (80055bc <_printf_i+0x248>)
 800551a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800551e:	e7e3      	b.n	80054e8 <_printf_i+0x174>
 8005520:	065e      	lsls	r6, r3, #25
 8005522:	bf48      	it	mi
 8005524:	b2ad      	uxthmi	r5, r5
 8005526:	e7e6      	b.n	80054f6 <_printf_i+0x182>
 8005528:	4616      	mov	r6, r2
 800552a:	e7bb      	b.n	80054a4 <_printf_i+0x130>
 800552c:	680b      	ldr	r3, [r1, #0]
 800552e:	6826      	ldr	r6, [r4, #0]
 8005530:	6960      	ldr	r0, [r4, #20]
 8005532:	1d1d      	adds	r5, r3, #4
 8005534:	600d      	str	r5, [r1, #0]
 8005536:	0635      	lsls	r5, r6, #24
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	d501      	bpl.n	8005540 <_printf_i+0x1cc>
 800553c:	6018      	str	r0, [r3, #0]
 800553e:	e002      	b.n	8005546 <_printf_i+0x1d2>
 8005540:	0671      	lsls	r1, r6, #25
 8005542:	d5fb      	bpl.n	800553c <_printf_i+0x1c8>
 8005544:	8018      	strh	r0, [r3, #0]
 8005546:	2300      	movs	r3, #0
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	4616      	mov	r6, r2
 800554c:	e7ba      	b.n	80054c4 <_printf_i+0x150>
 800554e:	680b      	ldr	r3, [r1, #0]
 8005550:	1d1a      	adds	r2, r3, #4
 8005552:	600a      	str	r2, [r1, #0]
 8005554:	681e      	ldr	r6, [r3, #0]
 8005556:	6862      	ldr	r2, [r4, #4]
 8005558:	2100      	movs	r1, #0
 800555a:	4630      	mov	r0, r6
 800555c:	f7fa fe58 	bl	8000210 <memchr>
 8005560:	b108      	cbz	r0, 8005566 <_printf_i+0x1f2>
 8005562:	1b80      	subs	r0, r0, r6
 8005564:	6060      	str	r0, [r4, #4]
 8005566:	6863      	ldr	r3, [r4, #4]
 8005568:	6123      	str	r3, [r4, #16]
 800556a:	2300      	movs	r3, #0
 800556c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005570:	e7a8      	b.n	80054c4 <_printf_i+0x150>
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	4632      	mov	r2, r6
 8005576:	4649      	mov	r1, r9
 8005578:	4640      	mov	r0, r8
 800557a:	47d0      	blx	sl
 800557c:	3001      	adds	r0, #1
 800557e:	d0ab      	beq.n	80054d8 <_printf_i+0x164>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	079b      	lsls	r3, r3, #30
 8005584:	d413      	bmi.n	80055ae <_printf_i+0x23a>
 8005586:	68e0      	ldr	r0, [r4, #12]
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	4298      	cmp	r0, r3
 800558c:	bfb8      	it	lt
 800558e:	4618      	movlt	r0, r3
 8005590:	e7a4      	b.n	80054dc <_printf_i+0x168>
 8005592:	2301      	movs	r3, #1
 8005594:	4632      	mov	r2, r6
 8005596:	4649      	mov	r1, r9
 8005598:	4640      	mov	r0, r8
 800559a:	47d0      	blx	sl
 800559c:	3001      	adds	r0, #1
 800559e:	d09b      	beq.n	80054d8 <_printf_i+0x164>
 80055a0:	3501      	adds	r5, #1
 80055a2:	68e3      	ldr	r3, [r4, #12]
 80055a4:	9903      	ldr	r1, [sp, #12]
 80055a6:	1a5b      	subs	r3, r3, r1
 80055a8:	42ab      	cmp	r3, r5
 80055aa:	dcf2      	bgt.n	8005592 <_printf_i+0x21e>
 80055ac:	e7eb      	b.n	8005586 <_printf_i+0x212>
 80055ae:	2500      	movs	r5, #0
 80055b0:	f104 0619 	add.w	r6, r4, #25
 80055b4:	e7f5      	b.n	80055a2 <_printf_i+0x22e>
 80055b6:	bf00      	nop
 80055b8:	08005841 	.word	0x08005841
 80055bc:	08005852 	.word	0x08005852

080055c0 <memcpy>:
 80055c0:	440a      	add	r2, r1
 80055c2:	4291      	cmp	r1, r2
 80055c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80055c8:	d100      	bne.n	80055cc <memcpy+0xc>
 80055ca:	4770      	bx	lr
 80055cc:	b510      	push	{r4, lr}
 80055ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055d6:	4291      	cmp	r1, r2
 80055d8:	d1f9      	bne.n	80055ce <memcpy+0xe>
 80055da:	bd10      	pop	{r4, pc}

080055dc <memmove>:
 80055dc:	4288      	cmp	r0, r1
 80055de:	b510      	push	{r4, lr}
 80055e0:	eb01 0402 	add.w	r4, r1, r2
 80055e4:	d902      	bls.n	80055ec <memmove+0x10>
 80055e6:	4284      	cmp	r4, r0
 80055e8:	4623      	mov	r3, r4
 80055ea:	d807      	bhi.n	80055fc <memmove+0x20>
 80055ec:	1e43      	subs	r3, r0, #1
 80055ee:	42a1      	cmp	r1, r4
 80055f0:	d008      	beq.n	8005604 <memmove+0x28>
 80055f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055fa:	e7f8      	b.n	80055ee <memmove+0x12>
 80055fc:	4402      	add	r2, r0
 80055fe:	4601      	mov	r1, r0
 8005600:	428a      	cmp	r2, r1
 8005602:	d100      	bne.n	8005606 <memmove+0x2a>
 8005604:	bd10      	pop	{r4, pc}
 8005606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800560a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800560e:	e7f7      	b.n	8005600 <memmove+0x24>

08005610 <_free_r>:
 8005610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005612:	2900      	cmp	r1, #0
 8005614:	d048      	beq.n	80056a8 <_free_r+0x98>
 8005616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800561a:	9001      	str	r0, [sp, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f1a1 0404 	sub.w	r4, r1, #4
 8005622:	bfb8      	it	lt
 8005624:	18e4      	addlt	r4, r4, r3
 8005626:	f000 f8d3 	bl	80057d0 <__malloc_lock>
 800562a:	4a20      	ldr	r2, [pc, #128]	; (80056ac <_free_r+0x9c>)
 800562c:	9801      	ldr	r0, [sp, #4]
 800562e:	6813      	ldr	r3, [r2, #0]
 8005630:	4615      	mov	r5, r2
 8005632:	b933      	cbnz	r3, 8005642 <_free_r+0x32>
 8005634:	6063      	str	r3, [r4, #4]
 8005636:	6014      	str	r4, [r2, #0]
 8005638:	b003      	add	sp, #12
 800563a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800563e:	f000 b8cd 	b.w	80057dc <__malloc_unlock>
 8005642:	42a3      	cmp	r3, r4
 8005644:	d90b      	bls.n	800565e <_free_r+0x4e>
 8005646:	6821      	ldr	r1, [r4, #0]
 8005648:	1862      	adds	r2, r4, r1
 800564a:	4293      	cmp	r3, r2
 800564c:	bf04      	itt	eq
 800564e:	681a      	ldreq	r2, [r3, #0]
 8005650:	685b      	ldreq	r3, [r3, #4]
 8005652:	6063      	str	r3, [r4, #4]
 8005654:	bf04      	itt	eq
 8005656:	1852      	addeq	r2, r2, r1
 8005658:	6022      	streq	r2, [r4, #0]
 800565a:	602c      	str	r4, [r5, #0]
 800565c:	e7ec      	b.n	8005638 <_free_r+0x28>
 800565e:	461a      	mov	r2, r3
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	b10b      	cbz	r3, 8005668 <_free_r+0x58>
 8005664:	42a3      	cmp	r3, r4
 8005666:	d9fa      	bls.n	800565e <_free_r+0x4e>
 8005668:	6811      	ldr	r1, [r2, #0]
 800566a:	1855      	adds	r5, r2, r1
 800566c:	42a5      	cmp	r5, r4
 800566e:	d10b      	bne.n	8005688 <_free_r+0x78>
 8005670:	6824      	ldr	r4, [r4, #0]
 8005672:	4421      	add	r1, r4
 8005674:	1854      	adds	r4, r2, r1
 8005676:	42a3      	cmp	r3, r4
 8005678:	6011      	str	r1, [r2, #0]
 800567a:	d1dd      	bne.n	8005638 <_free_r+0x28>
 800567c:	681c      	ldr	r4, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	6053      	str	r3, [r2, #4]
 8005682:	4421      	add	r1, r4
 8005684:	6011      	str	r1, [r2, #0]
 8005686:	e7d7      	b.n	8005638 <_free_r+0x28>
 8005688:	d902      	bls.n	8005690 <_free_r+0x80>
 800568a:	230c      	movs	r3, #12
 800568c:	6003      	str	r3, [r0, #0]
 800568e:	e7d3      	b.n	8005638 <_free_r+0x28>
 8005690:	6825      	ldr	r5, [r4, #0]
 8005692:	1961      	adds	r1, r4, r5
 8005694:	428b      	cmp	r3, r1
 8005696:	bf04      	itt	eq
 8005698:	6819      	ldreq	r1, [r3, #0]
 800569a:	685b      	ldreq	r3, [r3, #4]
 800569c:	6063      	str	r3, [r4, #4]
 800569e:	bf04      	itt	eq
 80056a0:	1949      	addeq	r1, r1, r5
 80056a2:	6021      	streq	r1, [r4, #0]
 80056a4:	6054      	str	r4, [r2, #4]
 80056a6:	e7c7      	b.n	8005638 <_free_r+0x28>
 80056a8:	b003      	add	sp, #12
 80056aa:	bd30      	pop	{r4, r5, pc}
 80056ac:	200000a0 	.word	0x200000a0

080056b0 <_malloc_r>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	1ccd      	adds	r5, r1, #3
 80056b4:	f025 0503 	bic.w	r5, r5, #3
 80056b8:	3508      	adds	r5, #8
 80056ba:	2d0c      	cmp	r5, #12
 80056bc:	bf38      	it	cc
 80056be:	250c      	movcc	r5, #12
 80056c0:	2d00      	cmp	r5, #0
 80056c2:	4606      	mov	r6, r0
 80056c4:	db01      	blt.n	80056ca <_malloc_r+0x1a>
 80056c6:	42a9      	cmp	r1, r5
 80056c8:	d903      	bls.n	80056d2 <_malloc_r+0x22>
 80056ca:	230c      	movs	r3, #12
 80056cc:	6033      	str	r3, [r6, #0]
 80056ce:	2000      	movs	r0, #0
 80056d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d2:	f000 f87d 	bl	80057d0 <__malloc_lock>
 80056d6:	4921      	ldr	r1, [pc, #132]	; (800575c <_malloc_r+0xac>)
 80056d8:	680a      	ldr	r2, [r1, #0]
 80056da:	4614      	mov	r4, r2
 80056dc:	b99c      	cbnz	r4, 8005706 <_malloc_r+0x56>
 80056de:	4f20      	ldr	r7, [pc, #128]	; (8005760 <_malloc_r+0xb0>)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	b923      	cbnz	r3, 80056ee <_malloc_r+0x3e>
 80056e4:	4621      	mov	r1, r4
 80056e6:	4630      	mov	r0, r6
 80056e8:	f000 f862 	bl	80057b0 <_sbrk_r>
 80056ec:	6038      	str	r0, [r7, #0]
 80056ee:	4629      	mov	r1, r5
 80056f0:	4630      	mov	r0, r6
 80056f2:	f000 f85d 	bl	80057b0 <_sbrk_r>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	d123      	bne.n	8005742 <_malloc_r+0x92>
 80056fa:	230c      	movs	r3, #12
 80056fc:	6033      	str	r3, [r6, #0]
 80056fe:	4630      	mov	r0, r6
 8005700:	f000 f86c 	bl	80057dc <__malloc_unlock>
 8005704:	e7e3      	b.n	80056ce <_malloc_r+0x1e>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	1b5b      	subs	r3, r3, r5
 800570a:	d417      	bmi.n	800573c <_malloc_r+0x8c>
 800570c:	2b0b      	cmp	r3, #11
 800570e:	d903      	bls.n	8005718 <_malloc_r+0x68>
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	441c      	add	r4, r3
 8005714:	6025      	str	r5, [r4, #0]
 8005716:	e004      	b.n	8005722 <_malloc_r+0x72>
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	42a2      	cmp	r2, r4
 800571c:	bf0c      	ite	eq
 800571e:	600b      	streq	r3, [r1, #0]
 8005720:	6053      	strne	r3, [r2, #4]
 8005722:	4630      	mov	r0, r6
 8005724:	f000 f85a 	bl	80057dc <__malloc_unlock>
 8005728:	f104 000b 	add.w	r0, r4, #11
 800572c:	1d23      	adds	r3, r4, #4
 800572e:	f020 0007 	bic.w	r0, r0, #7
 8005732:	1ac2      	subs	r2, r0, r3
 8005734:	d0cc      	beq.n	80056d0 <_malloc_r+0x20>
 8005736:	1a1b      	subs	r3, r3, r0
 8005738:	50a3      	str	r3, [r4, r2]
 800573a:	e7c9      	b.n	80056d0 <_malloc_r+0x20>
 800573c:	4622      	mov	r2, r4
 800573e:	6864      	ldr	r4, [r4, #4]
 8005740:	e7cc      	b.n	80056dc <_malloc_r+0x2c>
 8005742:	1cc4      	adds	r4, r0, #3
 8005744:	f024 0403 	bic.w	r4, r4, #3
 8005748:	42a0      	cmp	r0, r4
 800574a:	d0e3      	beq.n	8005714 <_malloc_r+0x64>
 800574c:	1a21      	subs	r1, r4, r0
 800574e:	4630      	mov	r0, r6
 8005750:	f000 f82e 	bl	80057b0 <_sbrk_r>
 8005754:	3001      	adds	r0, #1
 8005756:	d1dd      	bne.n	8005714 <_malloc_r+0x64>
 8005758:	e7cf      	b.n	80056fa <_malloc_r+0x4a>
 800575a:	bf00      	nop
 800575c:	200000a0 	.word	0x200000a0
 8005760:	200000a4 	.word	0x200000a4

08005764 <_realloc_r>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	4607      	mov	r7, r0
 8005768:	4614      	mov	r4, r2
 800576a:	460e      	mov	r6, r1
 800576c:	b921      	cbnz	r1, 8005778 <_realloc_r+0x14>
 800576e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005772:	4611      	mov	r1, r2
 8005774:	f7ff bf9c 	b.w	80056b0 <_malloc_r>
 8005778:	b922      	cbnz	r2, 8005784 <_realloc_r+0x20>
 800577a:	f7ff ff49 	bl	8005610 <_free_r>
 800577e:	4625      	mov	r5, r4
 8005780:	4628      	mov	r0, r5
 8005782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005784:	f000 f830 	bl	80057e8 <_malloc_usable_size_r>
 8005788:	42a0      	cmp	r0, r4
 800578a:	d20f      	bcs.n	80057ac <_realloc_r+0x48>
 800578c:	4621      	mov	r1, r4
 800578e:	4638      	mov	r0, r7
 8005790:	f7ff ff8e 	bl	80056b0 <_malloc_r>
 8005794:	4605      	mov	r5, r0
 8005796:	2800      	cmp	r0, #0
 8005798:	d0f2      	beq.n	8005780 <_realloc_r+0x1c>
 800579a:	4631      	mov	r1, r6
 800579c:	4622      	mov	r2, r4
 800579e:	f7ff ff0f 	bl	80055c0 <memcpy>
 80057a2:	4631      	mov	r1, r6
 80057a4:	4638      	mov	r0, r7
 80057a6:	f7ff ff33 	bl	8005610 <_free_r>
 80057aa:	e7e9      	b.n	8005780 <_realloc_r+0x1c>
 80057ac:	4635      	mov	r5, r6
 80057ae:	e7e7      	b.n	8005780 <_realloc_r+0x1c>

080057b0 <_sbrk_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4d06      	ldr	r5, [pc, #24]	; (80057cc <_sbrk_r+0x1c>)
 80057b4:	2300      	movs	r3, #0
 80057b6:	4604      	mov	r4, r0
 80057b8:	4608      	mov	r0, r1
 80057ba:	602b      	str	r3, [r5, #0]
 80057bc:	f7fc f8f6 	bl	80019ac <_sbrk>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_sbrk_r+0x1a>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_sbrk_r+0x1a>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	20000350 	.word	0x20000350

080057d0 <__malloc_lock>:
 80057d0:	4801      	ldr	r0, [pc, #4]	; (80057d8 <__malloc_lock+0x8>)
 80057d2:	f000 b811 	b.w	80057f8 <__retarget_lock_acquire_recursive>
 80057d6:	bf00      	nop
 80057d8:	20000358 	.word	0x20000358

080057dc <__malloc_unlock>:
 80057dc:	4801      	ldr	r0, [pc, #4]	; (80057e4 <__malloc_unlock+0x8>)
 80057de:	f000 b80c 	b.w	80057fa <__retarget_lock_release_recursive>
 80057e2:	bf00      	nop
 80057e4:	20000358 	.word	0x20000358

080057e8 <_malloc_usable_size_r>:
 80057e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ec:	1f18      	subs	r0, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bfbc      	itt	lt
 80057f2:	580b      	ldrlt	r3, [r1, r0]
 80057f4:	18c0      	addlt	r0, r0, r3
 80057f6:	4770      	bx	lr

080057f8 <__retarget_lock_acquire_recursive>:
 80057f8:	4770      	bx	lr

080057fa <__retarget_lock_release_recursive>:
 80057fa:	4770      	bx	lr

080057fc <_init>:
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	bf00      	nop
 8005800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005802:	bc08      	pop	{r3}
 8005804:	469e      	mov	lr, r3
 8005806:	4770      	bx	lr

08005808 <_fini>:
 8005808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580a:	bf00      	nop
 800580c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580e:	bc08      	pop	{r3}
 8005810:	469e      	mov	lr, r3
 8005812:	4770      	bx	lr
